package com.github.suninvr.virtualadditions.registry;

import com.github.suninvr.virtualadditions.VirtualAdditions;
import com.github.suninvr.virtualadditions.block.*;
import net.fabricmc.fabric.api.object.builder.v1.block.type.BlockSetTypeBuilder;
import net.fabricmc.fabric.api.object.builder.v1.block.type.WoodTypeBuilder;
import net.fabricmc.fabric.api.registry.LandPathNodeTypesRegistry;
import net.fabricmc.fabric.api.registry.StrippableBlockRegistry;
import net.minecraft.block.*;
import net.minecraft.block.AbstractBlock.Settings;
import net.minecraft.block.enums.NoteBlockInstrument;
import net.minecraft.block.piston.PistonBehavior;
import net.minecraft.entity.ai.pathing.PathNodeType;
import net.minecraft.sound.BlockSoundGroup;
import net.minecraft.sound.SoundEvents;
import net.minecraft.state.property.Properties;
import net.minecraft.util.DyeColor;
import net.minecraft.util.math.intprovider.ConstantIntProvider;
import net.minecraft.util.math.intprovider.UniformIntProvider;

import static com.github.suninvr.virtualadditions.VirtualAdditions.idOf;
import static com.github.suninvr.virtualadditions.VirtualAdditions.setBlocksInitialized;
import static com.github.suninvr.virtualadditions.registry.RegistryHelper.BlockRegistryHelper.register;

public class VABlocks {

    public static final BlockSoundGroup ROPE_SOUND_GROUP = new BlockSoundGroup(1.0F, 1.0F, VASoundEvents.BLOCK_ROPE_BREAK, VASoundEvents.BLOCK_ROPE_STEP, VASoundEvents.BLOCK_ROPE_PLACE, VASoundEvents.BLOCK_ROPE_HIT, VASoundEvents.BLOCK_ROPE_FALL);
    public static final BlockSoundGroup GRASSY_FLOATROCK_SOUNDGROUP = new BlockSoundGroup(1.0F, 1.0F, SoundEvents.BLOCK_TUFF_BREAK, SoundEvents.BLOCK_GRASS_STEP, SoundEvents.BLOCK_TUFF_PLACE, SoundEvents.BLOCK_TUFF_HIT, SoundEvents.BLOCK_GRASS_FALL);

    public static final Block CLIMBING_ROPE;
    public static final Block CLIMBING_ROPE_ANCHOR;
    public static final Block EXPOSED_CLIMBING_ROPE_ANCHOR;
    public static final Block WEATHERED_CLIMBING_ROPE_ANCHOR;
    public static final Block OXIDIZED_CLIMBING_ROPE_ANCHOR;
    public static final Block WAXED_CLIMBING_ROPE_ANCHOR;
    public static final Block WAXED_EXPOSED_CLIMBING_ROPE_ANCHOR;
    public static final Block WAXED_WEATHERED_CLIMBING_ROPE_ANCHOR;
    public static final Block WAXED_OXIDIZED_CLIMBING_ROPE_ANCHOR;
    public static final Block RAW_STEEL_BLOCK;
    public static final Block STEEL_BLOCK;
    public static final Block CUT_STEEL;
    public static final Block CUT_STEEL_STAIRS;
    public static final Block CUT_STEEL_SLAB;
    public static final Block STEEL_GRATE;
    public static final Block CHISELED_STEEL;
    public static final Block STEEL_FENCE;
    public static final Block STEEL_DOOR;
    public static final Block STEEL_TRAPDOOR;
    public static final Block REDSTONE_BRIDGE;
    public static final Block SPOTLIGHT;
    public static final Block SPOTLIGHT_LIGHT;
    public static final Block CAGELIGHT;
    public static final Block HORNFELS;
    public static final Block COBBLED_HORNFELS;
    public static final Block COBBLED_HORNFELS_STAIRS;
    public static final Block COBBLED_HORNFELS_SLAB;
    public static final Block COBBLED_HORNFELS_WALL;
    public static final Block POLISHED_HORNFELS;
    public static final Block POLISHED_HORNFELS_STAIRS;
    public static final Block POLISHED_HORNFELS_SLAB;
    public static final Block HORNFELS_TILES;
    public static final Block CRACKED_HORNFELS_TILES;
    public static final Block HORNFELS_TILE_STAIRS;
    public static final Block HORNFELS_TILE_SLAB;
    public static final Block CHISELED_HORNFELS;
    public static final Block CHISELED_HORNFELS_TILES;
    public static final Block BLUESCHIST;
    public static final Block COBBLED_BLUESCHIST;
    public static final Block COBBLED_BLUESCHIST_STAIRS;
    public static final Block COBBLED_BLUESCHIST_SLAB;
    public static final Block COBBLED_BLUESCHIST_WALL;
    public static final Block POLISHED_BLUESCHIST;
    public static final Block POLISHED_BLUESCHIST_STAIRS;
    public static final Block POLISHED_BLUESCHIST_SLAB;
    public static final Block BLUESCHIST_BRICKS;
    public static final Block CRACKED_BLUESCHIST_BRICKS;
    public static final Block BLUESCHIST_BRICK_STAIRS;
    public static final Block BLUESCHIST_BRICK_SLAB;
    public static final Block BLUESCHIST_BRICK_WALL;
    public static final Block CHISELED_BLUESCHIST;
    public static final Block SYENITE;
    public static final Block COBBLED_SYENITE;
    public static final Block COBBLED_SYENITE_STAIRS;
    public static final Block COBBLED_SYENITE_SLAB;
    public static final Block COBBLED_SYENITE_WALL;
    public static final Block POLISHED_SYENITE;
    public static final Block POLISHED_SYENITE_STAIRS;
    public static final Block POLISHED_SYENITE_SLAB;
    public static final Block SYENITE_BRICKS;
    public static final Block CRACKED_SYENITE_BRICKS;
    public static final Block SYENITE_BRICK_STAIRS;
    public static final Block SYENITE_BRICK_SLAB;
    public static final Block SYENITE_BRICK_WALL;
    public static final Block CHISELED_SYENITE;
    public static final Block ROCK_SALT_BLOCK;
    public static final Block ROCK_SALT_CRYSTAL;
    public static final Block COTTON;
    public static final Block CORN_CROP;
    public static final Block FLOATROCK;
    public static final Block GRASSY_FLOATROCK;
    public static final Block FLOATROCK_STAIRS;
    public static final Block FLOATROCK_SLAB;
    public static final Block FLOATROCK_WALL;
    public static final Block FLOATROCK_BRICKS;
    public static final Block FLOATROCK_BRICK_STAIRS;
    public static final Block FLOATROCK_BRICK_SLAB;
    public static final Block FLOATROCK_BRICK_WALL;
    public static final Block POLISHED_FLOATROCK;
    public static final Block POLISHED_FLOATROCK_STAIRS;
    public static final Block POLISHED_FLOATROCK_SLAB;
    public static final Block POLISHED_FLOATROCK_WALL;
    public static final Block FLOATROCK_COAL_ORE;
    public static final Block FLOATROCK_IRON_ORE;
    public static final Block FLOATROCK_COPPER_ORE;
    public static final Block FLOATROCK_GOLD_ORE;
    public static final Block FLOATROCK_REDSTONE_ORE;
    public static final Block FLOATROCK_EMERALD_ORE;
    public static final Block FLOATROCK_LAPIS_ORE;
    public static final Block FLOATROCK_DIAMOND_ORE;
    public static final Block SPRINGSOIL;
    public static final Block AEROBLOOM_LOG;
    public static final Block AEROBLOOM_WOOD;
    public static final Block STRIPPED_AEROBLOOM_LOG;
    public static final Block STRIPPED_AEROBLOOM_WOOD;
    public static final Block AEROBLOOM_PLANKS;
    public static final Block AEROBLOOM_STAIRS;
    public static final Block AEROBLOOM_SLAB;
    public static final Block AEROBLOOM_FENCE;
    public static final Block AEROBLOOM_FENCE_GATE;
    public static final Block AEROBLOOM_DOOR;
    public static final Block AEROBLOOM_TRAPDOOR;
    public static final Block AEROBLOOM_PRESSURE_PLATE;
    public static final Block AEROBLOOM_BUTTON;
    public static final Block AEROBLOOM_SIGN;
    public static final Block AEROBLOOM_WALL_SIGN;
    public static final Block AEROBLOOM_HANGING_SIGN;
    public static final Block AEROBLOOM_WALL_HANGING_SIGN;
    public static final Block AEROBLOOM_LEAVES;
    public static final Block AEROBLOOM_SAPLING;
    public static final Block BALLOON_BULB;
    public static final Block BALLOON_BULB_PLANT;
    public static final Block BALLOON_BULB_BUD;
    public static final Block OAK_HEDGE;
    public static final Block SPRUCE_HEDGE;
    public static final Block BIRCH_HEDGE;
    public static final Block JUNGLE_HEDGE;
    public static final Block ACACIA_HEDGE;
    public static final Block DARK_OAK_HEDGE;
    public static final Block MANGROVE_HEDGE;
    public static final Block CHERRY_HEDGE;
    public static final Block AEROBLOOM_HEDGE;
    public static final Block AZALEA_HEDGE;
    public static final Block FLOWERING_AZALEA_HEDGE;
    public static final Block GLOWING_SILK;
    public static final Block FRAYED_SILK;
    public static final Block LUMWASP_NEST;
    public static final Block SILK_BLOCK;
    public static final Block GREENCAP_MUSHROOM;
    public static final Block TALL_GREENCAP_MUSHROOMS;
    public static final Block WEBBED_SILK;
    public static final Block SILKBULB;
    public static final Block WHITE_SILKBULB;
    public static final Block LIGHT_GRAY_SILKBULB;
    public static final Block GRAY_SILKBULB;
    public static final Block BLACK_SILKBULB;
    public static final Block BROWN_SILKBULB;
    public static final Block RED_SILKBULB;
    public static final Block ORANGE_SILKBULB;
    public static final Block YELLOW_SILKBULB;
    public static final Block LIME_SILKBULB;
    public static final Block GREEN_SILKBULB;
    public static final Block CYAN_SILKBULB;
    public static final Block LIGHT_BLUE_SILKBULB;
    public static final Block BLUE_SILKBULB;
    public static final Block PURPLE_SILKBULB;
    public static final Block MAGENTA_SILKBULB;
    public static final Block PINK_SILKBULB;
    public static final Block CHARTREUSE_WOOL;
    public static final Block CHARTREUSE_CARPET;
    public static final Block CHARTREUSE_TERRACOTTA;
    public static final Block CHARTREUSE_CONCRETE;
    public static final Block CHARTREUSE_CONCRETE_POWDER;
    public static final Block CHARTREUSE_STAINED_GLASS;
    public static final Block CHARTREUSE_STAINED_GLASS_PANE;
    public static final Block CHARTREUSE_SILKBULB;
    public static final Block CHARTREUSE_CANDLE;
    public static final Block CHARTREUSE_CANDLE_CAKE;
    public static final Block CHARTREUSE_BED;
    public static final Block CHARTREUSE_SHULKER_BOX;
    public static final Block CHARTREUSE_BANNER;
    public static final Block CHARTREUSE_WALL_BANNER;
    public static final Block CHARTREUSE_GLAZED_TERRACOTTA;
    public static final Block MAROON_WOOL;
    public static final Block MAROON_CARPET;
    public static final Block MAROON_TERRACOTTA;
    public static final Block MAROON_CONCRETE;
    public static final Block MAROON_CONCRETE_POWDER;
    public static final Block MAROON_STAINED_GLASS;
    public static final Block MAROON_STAINED_GLASS_PANE;
    public static final Block MAROON_SILKBULB;
    public static final Block MAROON_CANDLE;
    public static final Block MAROON_CANDLE_CAKE;
    public static final Block MAROON_BED;
    public static final Block MAROON_SHULKER_BOX;
    public static final Block MAROON_BANNER;
    public static final Block MAROON_WALL_BANNER;
    public static final Block MAROON_GLAZED_TERRACOTTA;
    public static final Block INDIGO_WOOL;
    public static final Block INDIGO_CARPET;
    public static final Block INDIGO_TERRACOTTA;
    public static final Block INDIGO_CONCRETE;
    public static final Block INDIGO_CONCRETE_POWDER;
    public static final Block INDIGO_STAINED_GLASS;
    public static final Block INDIGO_STAINED_GLASS_PANE;
    public static final Block INDIGO_SILKBULB;
    public static final Block INDIGO_CANDLE;
    public static final Block INDIGO_CANDLE_CAKE;
    public static final Block INDIGO_BED;
    public static final Block INDIGO_SHULKER_BOX;
    public static final Block INDIGO_BANNER;
    public static final Block INDIGO_WALL_BANNER;
    public static final Block INDIGO_GLAZED_TERRACOTTA;
    public static final Block PLUM_WOOL;
    public static final Block PLUM_CARPET;
    public static final Block PLUM_TERRACOTTA;
    public static final Block PLUM_CONCRETE;
    public static final Block PLUM_CONCRETE_POWDER;
    public static final Block PLUM_STAINED_GLASS;
    public static final Block PLUM_STAINED_GLASS_PANE;
    public static final Block PLUM_SILKBULB;
    public static final Block PLUM_CANDLE;
    public static final Block PLUM_CANDLE_CAKE;
    public static final Block PLUM_BED;
    public static final Block PLUM_SHULKER_BOX;
    public static final Block PLUM_BANNER;
    public static final Block PLUM_WALL_BANNER;
    public static final Block PLUM_GLAZED_TERRACOTTA;
    public static final Block VIRIDIAN_WOOL;
    public static final Block VIRIDIAN_CARPET;
    public static final Block VIRIDIAN_TERRACOTTA;
    public static final Block VIRIDIAN_CONCRETE;
    public static final Block VIRIDIAN_CONCRETE_POWDER;
    public static final Block VIRIDIAN_STAINED_GLASS;
    public static final Block VIRIDIAN_STAINED_GLASS_PANE;
    public static final Block VIRIDIAN_SILKBULB;
    public static final Block VIRIDIAN_CANDLE;
    public static final Block VIRIDIAN_CANDLE_CAKE;
    public static final Block VIRIDIAN_BED;
    public static final Block VIRIDIAN_SHULKER_BOX;
    public static final Block VIRIDIAN_BANNER;
    public static final Block VIRIDIAN_WALL_BANNER;
    public static final Block VIRIDIAN_GLAZED_TERRACOTTA;
    public static final Block TAN_WOOL;
    public static final Block TAN_CARPET;
    public static final Block TAN_TERRACOTTA;
    public static final Block TAN_CONCRETE;
    public static final Block TAN_CONCRETE_POWDER;
    public static final Block TAN_STAINED_GLASS;
    public static final Block TAN_STAINED_GLASS_PANE;
    public static final Block TAN_SILKBULB;
    public static final Block TAN_CANDLE;
    public static final Block TAN_CANDLE_CAKE;
    public static final Block TAN_BED;
    public static final Block TAN_SHULKER_BOX;
    public static final Block TAN_BANNER;
    public static final Block TAN_WALL_BANNER;
    public static final Block TAN_GLAZED_TERRACOTTA;
    public static final Block SINOPIA_WOOL;
    public static final Block SINOPIA_CARPET;
    public static final Block SINOPIA_TERRACOTTA;
    public static final Block SINOPIA_CONCRETE;
    public static final Block SINOPIA_CONCRETE_POWDER;
    public static final Block SINOPIA_STAINED_GLASS;
    public static final Block SINOPIA_STAINED_GLASS_PANE;
    public static final Block SINOPIA_SILKBULB;
    public static final Block SINOPIA_CANDLE;
    public static final Block SINOPIA_CANDLE_CAKE;
    public static final Block SINOPIA_BED;
    public static final Block SINOPIA_SHULKER_BOX;
    public static final Block SINOPIA_BANNER;
    public static final Block SINOPIA_WALL_BANNER;
    public static final Block SINOPIA_GLAZED_TERRACOTTA;
    public static final Block LILAC_WOOL;
    public static final Block LILAC_CARPET;
    public static final Block LILAC_TERRACOTTA;
    public static final Block LILAC_CONCRETE;
    public static final Block LILAC_CONCRETE_POWDER;
    public static final Block LILAC_STAINED_GLASS;
    public static final Block LILAC_STAINED_GLASS_PANE;
    public static final Block LILAC_SILKBULB;
    public static final Block LILAC_CANDLE;
    public static final Block LILAC_CANDLE_CAKE;
    public static final Block LILAC_BED;
    public static final Block LILAC_SHULKER_BOX;
    public static final Block LILAC_BANNER;
    public static final Block LILAC_WALL_BANNER;
    public static final Block LILAC_GLAZED_TERRACOTTA;
    public static final Block COLORING_STATION;
    public static final Block ACID;
    public static final Block ACID_BLOCK;
    public static final Block IOLITE_ORE;
    public static final Block IOLITE_BLOCK;
    public static final Block WARP_ANCHOR;
    public static final Block WARP_TETHER;
    public static final Block ENTANGLEMENT_DRIVE;
    public static final Block DESTRUCTIVE_SCULK;
    public static final Block WIND;

    public static final BlockSetType AEROBLOOM = BlockSetTypeBuilder.copyOf(BlockSetType.CHERRY).build(idOf("aerobloom"));
    public static final WoodType AEROBLOOM_WOODTYPE = WoodType.register(WoodTypeBuilder.copyOf(WoodType.CHERRY).build(idOf("aerobloom"), AEROBLOOM));

    public static final BlockSetType STEEL_BLOCK_SET_TYPE;

    static {
        STEEL_BLOCK_SET_TYPE = new BlockSetType("steel", false, false, false, BlockSetType.ActivationRule.EVERYTHING, BlockSoundGroup.NETHERITE, SoundEvents.BLOCK_IRON_DOOR_CLOSE, SoundEvents.BLOCK_IRON_DOOR_OPEN, SoundEvents.BLOCK_IRON_TRAPDOOR_CLOSE, SoundEvents.BLOCK_IRON_TRAPDOOR_OPEN, SoundEvents.BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF, SoundEvents.BLOCK_METAL_PRESSURE_PLATE_CLICK_ON, SoundEvents.BLOCK_STONE_BUTTON_CLICK_OFF, SoundEvents.BLOCK_STONE_BUTTON_CLICK_ON);

        CLIMBING_ROPE = register("climbing_rope", new ClimbingRopeBlock(Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F)));
        CLIMBING_ROPE_ANCHOR = register("climbing_rope_anchor", new OxidizableClimbingRopeAnchor(Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F), Oxidizable.OxidationLevel.UNAFFECTED));
        EXPOSED_CLIMBING_ROPE_ANCHOR = register("exposed_climbing_rope_anchor", new OxidizableClimbingRopeAnchor(Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F), Oxidizable.OxidationLevel.EXPOSED));
        WEATHERED_CLIMBING_ROPE_ANCHOR = register("weathered_climbing_rope_anchor", new OxidizableClimbingRopeAnchor(Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F), Oxidizable.OxidationLevel.WEATHERED));
        OXIDIZED_CLIMBING_ROPE_ANCHOR = register("oxidized_climbing_rope_anchor", new OxidizableClimbingRopeAnchor(Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F), Oxidizable.OxidationLevel.OXIDIZED));
        WAXED_CLIMBING_ROPE_ANCHOR = register("waxed_climbing_rope_anchor", new ClimbingRopeAnchorBlock(Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F)));
        WAXED_EXPOSED_CLIMBING_ROPE_ANCHOR = register("waxed_exposed_climbing_rope_anchor", new ClimbingRopeAnchorBlock(Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F)));
        WAXED_WEATHERED_CLIMBING_ROPE_ANCHOR = register("waxed_weathered_climbing_rope_anchor", new ClimbingRopeAnchorBlock(Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F)));
        WAXED_OXIDIZED_CLIMBING_ROPE_ANCHOR = register("waxed_oxidized_climbing_rope_anchor", new ClimbingRopeAnchorBlock(Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F)));

        RAW_STEEL_BLOCK = register("raw_steel_block", new Block(Settings.create().mapColor(MapColor.GRAY).requiresTool().strength(5.0F, 300.0F)));
        STEEL_BLOCK = register("steel_block", new Block(Settings.create().mapColor(MapColor.GRAY).sounds(BlockSoundGroup.NETHERITE).requiresTool().hardness(5.0F).resistance(300.0F)));
        CUT_STEEL = register("cut_steel", new Block(Settings.copy(STEEL_BLOCK).strength(3.0F, 300.0F)));
        CUT_STEEL_STAIRS = register("cut_steel_stairs", new StairsBlock(CUT_STEEL.getDefaultState(), Settings.copy(CUT_STEEL)));
        CUT_STEEL_SLAB = register("cut_steel_slab", new SlabBlock(Settings.copy(CUT_STEEL)));
        STEEL_GRATE = register("steel_grate", new GrateBlock(Settings.copy(CUT_STEEL).strength(2.0F, 300.0F).nonOpaque()));
        CHISELED_STEEL = register("chiseled_steel", new Block(Settings.copy(CUT_STEEL)));
        STEEL_FENCE = register("steel_fence", new FenceBlock(Settings.copy(CUT_STEEL)));
        STEEL_DOOR = register("steel_door", new SteelDoorBlock(Settings.copy(STEEL_BLOCK).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
        STEEL_TRAPDOOR = register("steel_trapdoor", new SteelTrapdoorBlock(Settings.copy(STEEL_DOOR)));

        REDSTONE_BRIDGE = register("redstone_bridge", new RedstoneBridgeBlock(Settings.copy(STEEL_GRATE)));
        CAGELIGHT = register("cagelight", new ThinPillarBlock(Settings.copy(STEEL_GRATE).nonOpaque().emissiveLighting((state, world, pos) -> true).luminance( (state) -> 11 ) ));

        HORNFELS = register("hornfels", new PillarBlock(Settings.copy(Blocks.DEEPSLATE)));
        COBBLED_HORNFELS = register("cobbled_hornfels", new Block(Settings.copy(Blocks.COBBLED_DEEPSLATE)));
        COBBLED_HORNFELS_STAIRS = register("cobbled_hornfels_stairs", new CustomStairsBlock(COBBLED_HORNFELS.getDefaultState(), Settings.copy(Blocks.COBBLED_DEEPSLATE)));
        COBBLED_HORNFELS_SLAB = register("cobbled_hornfels_slab", new SlabBlock(Settings.copy(Blocks.COBBLED_DEEPSLATE)));
        COBBLED_HORNFELS_WALL = register("cobbled_hornfels_wall", new WallBlock(Settings.copy(Blocks.COBBLED_DEEPSLATE)));
        POLISHED_HORNFELS = register("polished_hornfels", new PillarBlock(Settings.copy(Blocks.POLISHED_DEEPSLATE)));
        POLISHED_HORNFELS_STAIRS = register("polished_hornfels_stairs", new CustomStairsBlock(POLISHED_HORNFELS.getDefaultState(), Settings.copy(Blocks.POLISHED_DEEPSLATE_STAIRS).mapColor(MapColor.LIGHT_BLUE_GRAY)));
        POLISHED_HORNFELS_SLAB = register("polished_hornfels_slab", new SlabBlock(Settings.copy(Blocks.POLISHED_DEEPSLATE_SLAB).mapColor(MapColor.LIGHT_BLUE_GRAY)));
        HORNFELS_TILES = register("hornfels_tiles", new Block(Settings.copy(Blocks.DEEPSLATE_TILES)));
        CRACKED_HORNFELS_TILES = register("cracked_hornfels_tiles", new Block(Settings.copy(Blocks.DEEPSLATE_TILES)));
        HORNFELS_TILE_STAIRS = register("hornfels_tile_stairs", new CustomStairsBlock(HORNFELS_TILES.getDefaultState(), Settings.copy(Blocks.DEEPSLATE_TILE_STAIRS)));
        HORNFELS_TILE_SLAB = register("hornfels_tile_slab", new SlabBlock(Settings.copy(Blocks.DEEPSLATE_TILE_SLAB)));
        CHISELED_HORNFELS = register("chiseled_hornfels", new Block(Settings.copy(POLISHED_HORNFELS)));
        CHISELED_HORNFELS_TILES = register("chiseled_hornfels_tiles", new Block(Settings.copy(HORNFELS_TILES)));

        BLUESCHIST = register("blueschist", new Block(Settings.copy(Blocks.DEEPSLATE).mapColor(MapColor.LIGHT_BLUE_GRAY)));
        COBBLED_BLUESCHIST = register("cobbled_blueschist", new Block(Settings.copy(Blocks.COBBLED_DEEPSLATE)));
        COBBLED_BLUESCHIST_STAIRS = register("cobbled_blueschist_stairs", new CustomStairsBlock(COBBLED_BLUESCHIST.getDefaultState(), Settings.copy(Blocks.COBBLED_DEEPSLATE)));
        COBBLED_BLUESCHIST_SLAB = register("cobbled_blueschist_slab", new SlabBlock(Settings.copy(Blocks.COBBLED_DEEPSLATE)));
        COBBLED_BLUESCHIST_WALL = register("cobbled_blueschist_wall", new WallBlock(Settings.copy(Blocks.COBBLED_DEEPSLATE)));
        POLISHED_BLUESCHIST = register("polished_blueschist", new Block(Settings.copy(Blocks.POLISHED_DEEPSLATE).mapColor(MapColor.LIGHT_BLUE_GRAY)));
        POLISHED_BLUESCHIST_STAIRS = register("polished_blueschist_stairs", new CustomStairsBlock(POLISHED_BLUESCHIST.getDefaultState(), Settings.copy(Blocks.POLISHED_DEEPSLATE_STAIRS).mapColor(MapColor.LIGHT_BLUE_GRAY)));
        POLISHED_BLUESCHIST_SLAB = register("polished_blueschist_slab", new SlabBlock(Settings.copy(Blocks.POLISHED_DEEPSLATE_SLAB).mapColor(MapColor.LIGHT_BLUE_GRAY)));
        BLUESCHIST_BRICKS = register("blueschist_bricks", new Block(Settings.copy(Blocks.DEEPSLATE_BRICKS).mapColor(MapColor.LIGHT_BLUE_GRAY)));
        CRACKED_BLUESCHIST_BRICKS = register("cracked_blueschist_bricks", new Block(Settings.copy(Blocks.DEEPSLATE_BRICKS).mapColor(MapColor.LIGHT_BLUE_GRAY)));
        BLUESCHIST_BRICK_STAIRS = register("blueschist_brick_stairs", new CustomStairsBlock(BLUESCHIST_BRICKS.getDefaultState(), Settings.copy(Blocks.DEEPSLATE_BRICK_STAIRS)));
        BLUESCHIST_BRICK_SLAB = register("blueschist_brick_slab", new SlabBlock(Settings.copy(Blocks.DEEPSLATE_BRICK_SLAB)));
        BLUESCHIST_BRICK_WALL = register("blueschist_brick_wall", new WallBlock(Settings.copy(Blocks.DEEPSLATE_BRICK_WALL)));
        CHISELED_BLUESCHIST = register("chiseled_blueschist", new Block(Settings.copy(BLUESCHIST_BRICKS)));

        SYENITE = register("syenite", new Block(Settings.copy(Blocks.DEEPSLATE).mapColor(MapColor.BROWN)));
        COBBLED_SYENITE = register("cobbled_syenite", new Block(Settings.copy(Blocks.COBBLED_DEEPSLATE).mapColor(MapColor.BROWN)));
        COBBLED_SYENITE_STAIRS = register("cobbled_syenite_stairs", new CustomStairsBlock(COBBLED_SYENITE.getDefaultState(), Settings.copy(Blocks.COBBLED_DEEPSLATE).mapColor(MapColor.BROWN)));
        COBBLED_SYENITE_SLAB = register("cobbled_syenite_slab", new SlabBlock(Settings.copy(Blocks.COBBLED_DEEPSLATE).mapColor(MapColor.BROWN)));
        COBBLED_SYENITE_WALL = register("cobbled_syenite_wall", new WallBlock(Settings.copy(Blocks.COBBLED_DEEPSLATE).mapColor(MapColor.BROWN)));
        POLISHED_SYENITE = register("polished_syenite", new Block(Settings.copy(Blocks.POLISHED_DEEPSLATE).mapColor(MapColor.BROWN)));
        POLISHED_SYENITE_STAIRS = register("polished_syenite_stairs", new CustomStairsBlock(POLISHED_SYENITE.getDefaultState(), Settings.copy(Blocks.POLISHED_DEEPSLATE_STAIRS).mapColor(MapColor.LIGHT_BLUE_GRAY)));
        POLISHED_SYENITE_SLAB = register("polished_syenite_slab", new SlabBlock(Settings.copy(Blocks.POLISHED_DEEPSLATE_SLAB).mapColor(MapColor.LIGHT_BLUE_GRAY)));
        SYENITE_BRICKS = register("syenite_bricks", new Block(Settings.copy(Blocks.DEEPSLATE_BRICKS).mapColor(MapColor.BROWN)));
        CRACKED_SYENITE_BRICKS = register("cracked_syenite_bricks", new Block(Settings.copy(Blocks.DEEPSLATE_BRICKS).mapColor(MapColor.BROWN)));
        SYENITE_BRICK_STAIRS = register("syenite_brick_stairs", new CustomStairsBlock(SYENITE_BRICKS.getDefaultState(), Settings.copy(Blocks.DEEPSLATE_BRICK_STAIRS)));
        SYENITE_BRICK_SLAB = register("syenite_brick_slab", new SlabBlock(Settings.copy(Blocks.DEEPSLATE_BRICK_SLAB)));
        SYENITE_BRICK_WALL = register("syenite_brick_wall", new WallBlock(Settings.copy(Blocks.DEEPSLATE_BRICK_WALL)));
        CHISELED_SYENITE = register("chiseled_syenite", new Block(Settings.copy(SYENITE_BRICKS)));

        ROCK_SALT_BLOCK = register("rock_salt_block", new Block(Settings.copy(Blocks.CALCITE)));
        ROCK_SALT_CRYSTAL = register("rock_salt_crystal", new CrystalBlock(Settings.copy(Blocks.AMETHYST_CLUSTER).luminance(state -> 0).sounds(BlockSoundGroup.CALCITE).pistonBehavior(PistonBehavior.DESTROY)));

        SPOTLIGHT = register("spotlight", new SpotlightBlock(Settings.copy(STEEL_BLOCK).nonOpaque().luminance((state) -> state.get(SpotlightBlock.POWERED) ? 6 : 0).emissiveLighting((state, world, pos) -> state.get(Properties.POWERED)) ));
        SPOTLIGHT_LIGHT = register("spotlight_light", new SpotlightLightBlock(Settings.create().sounds(BlockSoundGroup.INTENTIONALLY_EMPTY).replaceable().noCollision().dropsNothing().luminance((state) -> state.get(SpotlightLightBlock.LIT) ? 15 : 0).pistonBehavior(PistonBehavior.DESTROY)));

        COTTON = register("cotton", new CottonCropBlock(Settings.create().noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP)));
        CORN_CROP = register("corn_crop", new CornCropBlock(Settings.create().noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP).offset(AbstractBlock.OffsetType.XZ)));

        FLOATROCK = register("floatrock", new FloatrockBlock(Settings.copy(Blocks.TUFF)));
        GRASSY_FLOATROCK = register("grassy_floatrock", new GrassyFloatrockBlock(Settings.copy(Blocks.TUFF).sounds(GRASSY_FLOATROCK_SOUNDGROUP)));
        FLOATROCK_STAIRS = register("floatrock_stairs", new StairsBlock(FLOATROCK.getDefaultState(), Settings.copy(Blocks.TUFF)));
        FLOATROCK_SLAB = register("floatrock_slab", new SlabBlock(Settings.copy(Blocks.TUFF)));
        FLOATROCK_WALL = register("floatrock_wall", new WallBlock(Settings.copy(Blocks.TUFF)));
        FLOATROCK_BRICKS = register("floatrock_bricks", new Block(Settings.copy(Blocks.TUFF_BRICKS).requires()));
        FLOATROCK_BRICK_STAIRS = register("floatrock_brick_stairs", new StairsBlock(FLOATROCK_BRICKS.getDefaultState(), Settings.copy(Blocks.TUFF_BRICKS).requires()));
        FLOATROCK_BRICK_SLAB = register("floatrock_brick_slab", new SlabBlock(Settings.copy(Blocks.TUFF_BRICKS).requires()));
        FLOATROCK_BRICK_WALL = register("floatrock_brick_wall", new WallBlock(Settings.copy(Blocks.TUFF_BRICKS).requires()));
        POLISHED_FLOATROCK = register("polished_floatrock", new Block(Settings.copy(Blocks.POLISHED_TUFF).requires()));
        POLISHED_FLOATROCK_STAIRS = register("polished_floatrock_stairs", new StairsBlock(POLISHED_FLOATROCK.getDefaultState(), Settings.copy(Blocks.POLISHED_TUFF).requires()));
        POLISHED_FLOATROCK_SLAB = register("polished_floatrock_slab", new SlabBlock(Settings.copy(Blocks.POLISHED_TUFF).requires()));
        POLISHED_FLOATROCK_WALL = register("polished_floatrock_wall", new WallBlock(Settings.copy(Blocks.POLISHED_TUFF).requires()));

        BALLOON_BULB = register("balloon_bulb", new BalloonBulbBlock(Settings.copy(COTTON).mapColor(MapColor.LIGHT_BLUE).offset(AbstractBlock.OffsetType.XZ)));
        BALLOON_BULB_PLANT = register("balloon_bulb_plant", new BalloonBulbPlantBlock(Settings.copy(BALLOON_BULB).requires(VirtualAdditions.PREVIEW)));
        BALLOON_BULB_BUD = register("balloon_bulb_bud", new BalloonBulbBudBlock(Settings.copy(BALLOON_BULB).requires(VirtualAdditions.PREVIEW)));

        Settings floatrockOreSettings = Settings.create().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).requiresTool().strength(2.0F, 1.5F).sounds(BlockSoundGroup.TUFF);

        FLOATROCK_COAL_ORE = register("floatrock_coal_ore", new ExperienceDroppingBlock(UniformIntProvider.create(0, 2), floatrockOreSettings));
        FLOATROCK_IRON_ORE = register("floatrock_iron_ore", new ExperienceDroppingBlock(ConstantIntProvider.create(0), floatrockOreSettings));
        FLOATROCK_COPPER_ORE = register("floatrock_copper_ore", new ExperienceDroppingBlock(ConstantIntProvider.create(0), floatrockOreSettings));
        FLOATROCK_GOLD_ORE = register("floatrock_gold_ore", new ExperienceDroppingBlock(ConstantIntProvider.create(0), floatrockOreSettings));
        FLOATROCK_REDSTONE_ORE = register("floatrock_redstone_ore", new RedstoneOreBlock(floatrockOreSettings));
        FLOATROCK_EMERALD_ORE = register("floatrock_emerald_ore", new ExperienceDroppingBlock(UniformIntProvider.create(3, 7), floatrockOreSettings));
        FLOATROCK_LAPIS_ORE = register("floatrock_lapis_ore", new ExperienceDroppingBlock(UniformIntProvider.create(2, 5), floatrockOreSettings));
        FLOATROCK_DIAMOND_ORE = register("floatrock_diamond_ore", new ExperienceDroppingBlock(UniformIntProvider.create(3, 7), floatrockOreSettings));

        SPRINGSOIL = register("springsoil", new SpringSoilBlock(Settings.copy(Blocks.ROOTED_DIRT).requires(VirtualAdditions.PREVIEW)));

        AEROBLOOM_LOG = register("aerobloom_log", new PillarBlock(Settings.copy(Blocks.CHERRY_LOG)));
        AEROBLOOM_WOOD = register("aerobloom_wood", new PillarBlock(Settings.copy(Blocks.CHERRY_WOOD)));
        STRIPPED_AEROBLOOM_LOG = register("stripped_aerobloom_log", new PillarBlock(Settings.copy(Blocks.STRIPPED_CHERRY_LOG)));
        STRIPPED_AEROBLOOM_WOOD = register("stripped_aerobloom_wood", new PillarBlock(Settings.copy(Blocks.STRIPPED_CHERRY_WOOD)));
        AEROBLOOM_PLANKS = register("aerobloom_planks", new Block(Settings.copy(Blocks.CHERRY_PLANKS)));
        AEROBLOOM_STAIRS = register("aerobloom_stairs", new StairsBlock(AEROBLOOM_PLANKS.getDefaultState(), Settings.copy(Blocks.CHERRY_STAIRS)));
        AEROBLOOM_SLAB = register("aerobloom_slab", new SlabBlock(Settings.copy(Blocks.CHERRY_SLAB)));
        AEROBLOOM_FENCE = register("aerobloom_fence", new FenceBlock(Settings.copy(Blocks.CHERRY_SLAB)));
        AEROBLOOM_FENCE_GATE = register("aerobloom_fence_gate", new FenceGateBlock(AEROBLOOM_WOODTYPE, Settings.copy(Blocks.CHERRY_SLAB)));
        AEROBLOOM_DOOR = register("aerobloom_door", new DoorBlock( AEROBLOOM, Settings.copy(Blocks.CHERRY_DOOR)));
        AEROBLOOM_TRAPDOOR = register("aerobloom_trapdoor", new TrapdoorBlock( AEROBLOOM, Settings.copy(Blocks.CHERRY_DOOR)));
        AEROBLOOM_PRESSURE_PLATE = register("aerobloom_pressure_plate", new PressurePlateBlock(AEROBLOOM, Settings.copy(Blocks.CHERRY_BUTTON)));
        AEROBLOOM_BUTTON = register("aerobloom_button", new ButtonBlock(AEROBLOOM, 30, Settings.copy(Blocks.CHERRY_BUTTON)));
        AEROBLOOM_SIGN = register("aerobloom_sign", new CustomSignBlocks.CustomSignBlock(Settings.copy(Blocks.CHERRY_SIGN), AEROBLOOM_WOODTYPE));
        AEROBLOOM_WALL_SIGN = register("aerobloom_wall_sign", new CustomSignBlocks.CustomWallSignBlock(Settings.copy(AEROBLOOM_SIGN).dropsLike(AEROBLOOM_SIGN), AEROBLOOM_WOODTYPE));
        AEROBLOOM_HANGING_SIGN = register("aerobloom_hanging_sign", new CustomSignBlocks.CustomHangingSignBlock(Settings.copy(Blocks.CHERRY_HANGING_SIGN), AEROBLOOM_WOODTYPE));
        AEROBLOOM_WALL_HANGING_SIGN = register("aerobloom_wall_hanging_sign", new CustomSignBlocks.CustomWallHangingSignBlock(Settings.copy(Blocks.CHERRY_WALL_HANGING_SIGN).dropsLike(AEROBLOOM_HANGING_SIGN), AEROBLOOM_WOODTYPE));
        AEROBLOOM_LEAVES = register("aerobloom_leaves", new LeavesBlock(Settings.copy(Blocks.CHERRY_LEAVES)));
        AEROBLOOM_SAPLING = register("aerobloom_sapling", new SaplingBlock(CustomSaplingGenerator.AEROBLOOM, Settings.copy(Blocks.CHERRY_SAPLING)));

        OAK_HEDGE = register("oak_hedge", new HedgeBlock(Settings.copy(Blocks.OAK_LEAVES)));
        SPRUCE_HEDGE = register("spruce_hedge", new HedgeBlock(Settings.copy(Blocks.SPRUCE_LEAVES)));
        BIRCH_HEDGE = register("birch_hedge", new HedgeBlock(Settings.copy(Blocks.BIRCH_LEAVES)));
        JUNGLE_HEDGE = register("jungle_hedge", new HedgeBlock(Settings.copy(Blocks.JUNGLE_LEAVES)));
        ACACIA_HEDGE = register("acacia_hedge", new HedgeBlock(Settings.copy(Blocks.ACACIA_LEAVES)));
        DARK_OAK_HEDGE = register("dark_oak_hedge", new HedgeBlock(Settings.copy(Blocks.DARK_OAK_LEAVES)));
        MANGROVE_HEDGE = register("mangrove_hedge", new HedgeBlock(Settings.copy(Blocks.MANGROVE_LEAVES)));
        CHERRY_HEDGE = register("cherry_hedge", new HedgeBlock(Settings.copy(Blocks.CHERRY_LEAVES)));
        AEROBLOOM_HEDGE = register("aerobloom_hedge", new HedgeBlock(Settings.copy(AEROBLOOM_LEAVES)));
        AZALEA_HEDGE = register("azalea_hedge", new HedgeBlock(Settings.copy(Blocks.AZALEA_LEAVES)));
        FLOWERING_AZALEA_HEDGE = register("flowering_azalea_hedge", new HedgeBlock(Settings.copy(Blocks.FLOWERING_AZALEA_LEAVES)));

        GLOWING_SILK = register("glowing_silk", new HangingBlock(Settings.create().mapColor(MapColor.LIGHT_BLUE).sounds(BlockSoundGroup.WART_BLOCK).luminance((state) -> 6).noCollision().nonOpaque().breakInstantly().offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
        FRAYED_SILK = register("frayed_silk", new FrayedSilkBlock(Settings.create().mapColor(MapColor.DARK_AQUA).sounds(BlockSoundGroup.WART_BLOCK).noCollision().nonOpaque().breakInstantly().replaceable().offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY)));
        LUMWASP_NEST = register("lumwasp_nest", new LumwaspNestBlock(Settings.copy(Blocks.HONEYCOMB_BLOCK).sounds(BlockSoundGroup.WART_BLOCK).mapColor(MapColor.DARK_AQUA).burnable()));
        SILK_BLOCK = register("silk_block", new SilkBlock(Settings.copy(Blocks.HONEYCOMB_BLOCK).sounds(BlockSoundGroup.WART_BLOCK).mapColor(MapColor.DARK_AQUA).burnable()));
        GREENCAP_MUSHROOM = register("greencap_mushroom", new GreencapMushroomBlock(Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.NETHER_SPROUTS).offset(AbstractBlock.OffsetType.XZ).luminance((state) -> 2).pistonBehavior(PistonBehavior.DESTROY)));
        TALL_GREENCAP_MUSHROOMS = register("tall_greencap_mushrooms", new TallGreencapMushroomBlock(Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.NETHER_SPROUTS).offset(AbstractBlock.OffsetType.XZ).luminance((state) -> 5).pistonBehavior(PistonBehavior.DESTROY)));
        WEBBED_SILK = register("webbed_silk", new SilkFluffBlock(Settings.create().strength(0.25F).sounds(BlockSoundGroup.POWDER_SNOW).mapColor(MapColor.DARK_AQUA).nonOpaque().solidBlock((state, world, pos) -> false).suffocates(((state, world, pos) -> false)).blockVision((state, world, pos) -> false).burnable().allowsSpawning((state, world, pos, type) -> type == VAEntityType.LUMWASP)));
        SILKBULB = register("silkbulb", new Block(Settings.copy(Blocks.SHROOMLIGHT).mapColor(MapColor.DARK_AQUA).luminance( (state) -> 15 ).burnable()));
        WHITE_SILKBULB = register("white_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.WHITE)));
        LIGHT_GRAY_SILKBULB = register("light_gray_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.LIGHT_GRAY)));
        GRAY_SILKBULB = register("gray_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.GRAY)));
        BLACK_SILKBULB = register("black_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.BLACK)));
        BROWN_SILKBULB = register("brown_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.BROWN)));
        RED_SILKBULB = register("red_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.RED)));
        ORANGE_SILKBULB = register("orange_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.ORANGE)));
        YELLOW_SILKBULB = register("yellow_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.YELLOW)));
        LIME_SILKBULB = register("lime_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.LIME)));
        GREEN_SILKBULB = register("green_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.GREEN)));
        CYAN_SILKBULB = register("cyan_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.CYAN)));
        LIGHT_BLUE_SILKBULB = register("light_blue_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.LIGHT_BLUE)));
        BLUE_SILKBULB = register("blue_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.BLUE)));
        PURPLE_SILKBULB = register("purple_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.PURPLE)));
        MAGENTA_SILKBULB = register("magenta_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.MAGENTA)));
        PINK_SILKBULB = register("pink_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.PINK)));

        CHARTREUSE_WOOL = register("chartreuse_wool", new Block(Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME)));
        CHARTREUSE_CARPET = register("chartreuse_carpet", new DyedCarpetBlock(VADyeColors.CHARTREUSE,  Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME)));
        CHARTREUSE_TERRACOTTA = register("chartreuse_terracotta", new Block(Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME)));
        CHARTREUSE_CONCRETE = register("chartreuse_concrete", new Block(Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME)));
        CHARTREUSE_CONCRETE_POWDER = register("chartreuse_concrete_powder", new ConcretePowderBlock(CHARTREUSE_CONCRETE, Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME)));
        CHARTREUSE_STAINED_GLASS = register("chartreuse_stained_glass", new StainedGlassBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME)));
        CHARTREUSE_STAINED_GLASS_PANE = register("chartreuse_stained_glass_pane", new StainedGlassPaneBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME)));
        CHARTREUSE_SILKBULB = register("chartreuse_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.LIME)));
        CHARTREUSE_CANDLE = register("chartreuse_candle", new CandleBlock(Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME)));
        CHARTREUSE_CANDLE_CAKE = register("chartreuse_candle_cake", new CandleCakeBlock(CHARTREUSE_CANDLE, Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME)));
        CHARTREUSE_BED = register("chartreuse_bed", new CustomBedBlock(VADyeColors.CHARTREUSE, Settings.copy(Blocks.WHITE_BED)));
        CHARTREUSE_SHULKER_BOX = register("chartreuse_shulker_box", new CustomShulkerBoxBlock(VADyeColors.CHARTREUSE, Settings.copy(Blocks.SHULKER_BOX)));
        CHARTREUSE_BANNER = register("chartreuse_banner", new CustomBannerBlock(VADyeColors.CHARTREUSE, Settings.copy(Blocks.WHITE_BANNER)));
        CHARTREUSE_WALL_BANNER = register("chartreuse_wall_banner", new CustomWallBannerBlock(VADyeColors.CHARTREUSE, Settings.copy(Blocks.WHITE_WALL_BANNER).dropsLike(CHARTREUSE_BANNER)));
        CHARTREUSE_GLAZED_TERRACOTTA = register("chartreuse_glazed_terracotta", new GlazedTerracottaBlock(Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.CHARTREUSE)));
        
        MAROON_WOOL = register("maroon_wool", new Block(Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME)));
        MAROON_CARPET = register("maroon_carpet", new DyedCarpetBlock(VADyeColors.MAROON, Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME)));
        MAROON_TERRACOTTA = register("maroon_terracotta", new Block(Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME)));
        MAROON_CONCRETE = register("maroon_concrete", new Block(Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME)));
        MAROON_CONCRETE_POWDER = register("maroon_concrete_powder", new ConcretePowderBlock(MAROON_CONCRETE, Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME)));
        MAROON_STAINED_GLASS = register("maroon_stained_glass", new StainedGlassBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME)));
        MAROON_STAINED_GLASS_PANE = register("maroon_stained_glass_pane", new StainedGlassPaneBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME)));
        MAROON_SILKBULB = register("maroon_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.LIME)));
        MAROON_CANDLE = register("maroon_candle", new CandleBlock(Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME)));
        MAROON_CANDLE_CAKE = register("maroon_candle_cake", new CandleCakeBlock(MAROON_CANDLE, Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME)));
        MAROON_BED = register("maroon_bed", new CustomBedBlock(VADyeColors.MAROON, Settings.copy(Blocks.WHITE_BED)));
        MAROON_SHULKER_BOX = register("maroon_shulker_box", new CustomShulkerBoxBlock(VADyeColors.MAROON, Settings.copy(Blocks.SHULKER_BOX)));
        MAROON_BANNER = register("maroon_banner", new CustomBannerBlock(VADyeColors.MAROON, Settings.copy(Blocks.WHITE_BANNER)));
        MAROON_WALL_BANNER = register("maroon_wall_banner", new CustomWallBannerBlock(VADyeColors.MAROON, Settings.copy(Blocks.WHITE_WALL_BANNER).dropsLike(MAROON_BANNER)));
        MAROON_GLAZED_TERRACOTTA = register("maroon_glazed_terracotta", new GlazedTerracottaBlock(Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.MAROON)));

        INDIGO_WOOL = register("indigo_wool", new Block(Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME)));
        INDIGO_CARPET = register("indigo_carpet", new DyedCarpetBlock(VADyeColors.INDIGO, Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME)));
        INDIGO_TERRACOTTA = register("indigo_terracotta", new Block(Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME)));
        INDIGO_CONCRETE = register("indigo_concrete", new Block(Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME)));
        INDIGO_CONCRETE_POWDER = register("indigo_concrete_powder", new ConcretePowderBlock(INDIGO_CONCRETE, Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME)));
        INDIGO_STAINED_GLASS = register("indigo_stained_glass", new StainedGlassBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME)));
        INDIGO_STAINED_GLASS_PANE = register("indigo_stained_glass_pane", new StainedGlassPaneBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME)));
        INDIGO_SILKBULB = register("indigo_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.LIME)));
        INDIGO_CANDLE = register("indigo_candle", new CandleBlock(Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME)));
        INDIGO_CANDLE_CAKE = register("indigo_candle_cake", new CandleCakeBlock(INDIGO_CANDLE, Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME)));
        INDIGO_BED = register("indigo_bed", new CustomBedBlock(VADyeColors.INDIGO, Settings.copy(Blocks.WHITE_BED)));
        INDIGO_SHULKER_BOX = register("indigo_shulker_box", new CustomShulkerBoxBlock(VADyeColors.INDIGO, Settings.copy(Blocks.SHULKER_BOX)));
        INDIGO_BANNER = register("indigo_banner", new CustomBannerBlock(VADyeColors.INDIGO, Settings.copy(Blocks.WHITE_BANNER)));
        INDIGO_WALL_BANNER = register("indigo_wall_banner", new CustomWallBannerBlock(VADyeColors.INDIGO, Settings.copy(Blocks.WHITE_WALL_BANNER).dropsLike(INDIGO_BANNER)));
        INDIGO_GLAZED_TERRACOTTA = register("indigo_glazed_terracotta", new GlazedTerracottaBlock(Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.INDIGO)));

        PLUM_WOOL = register("plum_wool", new Block(Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME)));
        PLUM_CARPET = register("plum_carpet", new DyedCarpetBlock(VADyeColors.PLUM, Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME)));
        PLUM_TERRACOTTA = register("plum_terracotta", new Block(Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME)));
        PLUM_CONCRETE = register("plum_concrete", new Block(Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME)));
        PLUM_CONCRETE_POWDER = register("plum_concrete_powder", new ConcretePowderBlock(PLUM_CONCRETE, Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME)));
        PLUM_STAINED_GLASS = register("plum_stained_glass", new StainedGlassBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME)));
        PLUM_STAINED_GLASS_PANE = register("plum_stained_glass_pane", new StainedGlassPaneBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME)));
        PLUM_SILKBULB = register("plum_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.LIME)));
        PLUM_CANDLE = register("plum_candle", new CandleBlock(Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME)));
        PLUM_CANDLE_CAKE = register("plum_candle_cake", new CandleCakeBlock(PLUM_CANDLE, Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME)));
        PLUM_BED = register("plum_bed", new CustomBedBlock(VADyeColors.PLUM, Settings.copy(Blocks.WHITE_BED)));
        PLUM_SHULKER_BOX = register("plum_shulker_box", new CustomShulkerBoxBlock(VADyeColors.PLUM, Settings.copy(Blocks.SHULKER_BOX)));
        PLUM_BANNER = register("plum_banner", new CustomBannerBlock(VADyeColors.PLUM, Settings.copy(Blocks.WHITE_BANNER)));
        PLUM_WALL_BANNER = register("plum_wall_banner", new CustomWallBannerBlock(VADyeColors.PLUM, Settings.copy(Blocks.WHITE_WALL_BANNER).dropsLike(PLUM_BANNER)));
        PLUM_GLAZED_TERRACOTTA = register("plum_glazed_terracotta", new GlazedTerracottaBlock(Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.PLUM)));

        VIRIDIAN_WOOL = register("viridian_wool", new Block(Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME)));
        VIRIDIAN_CARPET = register("viridian_carpet", new DyedCarpetBlock(VADyeColors.VIRIDIAN, Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME)));
        VIRIDIAN_TERRACOTTA = register("viridian_terracotta", new Block(Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME)));
        VIRIDIAN_CONCRETE = register("viridian_concrete", new Block(Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME)));
        VIRIDIAN_CONCRETE_POWDER = register("viridian_concrete_powder", new ConcretePowderBlock(VIRIDIAN_CONCRETE, Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME)));
        VIRIDIAN_STAINED_GLASS = register("viridian_stained_glass", new StainedGlassBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME)));
        VIRIDIAN_STAINED_GLASS_PANE = register("viridian_stained_glass_pane", new StainedGlassPaneBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME)));
        VIRIDIAN_SILKBULB = register("viridian_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.LIME)));
        VIRIDIAN_CANDLE = register("viridian_candle", new CandleBlock(Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME)));
        VIRIDIAN_CANDLE_CAKE = register("viridian_candle_cake", new CandleCakeBlock(VIRIDIAN_CANDLE, Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME)));
        VIRIDIAN_BED = register("viridian_bed", new CustomBedBlock(VADyeColors.VIRIDIAN, Settings.copy(Blocks.WHITE_BED)));
        VIRIDIAN_SHULKER_BOX = register("viridian_shulker_box", new CustomShulkerBoxBlock(VADyeColors.VIRIDIAN, Settings.copy(Blocks.SHULKER_BOX)));
        VIRIDIAN_BANNER = register("viridian_banner", new CustomBannerBlock(VADyeColors.VIRIDIAN, Settings.copy(Blocks.WHITE_BANNER)));
        VIRIDIAN_WALL_BANNER = register("viridian_wall_banner", new CustomWallBannerBlock(VADyeColors.VIRIDIAN, Settings.copy(Blocks.WHITE_WALL_BANNER).dropsLike(VIRIDIAN_BANNER)));
        VIRIDIAN_GLAZED_TERRACOTTA = register("viridian_glazed_terracotta", new GlazedTerracottaBlock(Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.VIRIDIAN)));

        TAN_WOOL = register("tan_wool", new Block(Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME)));
        TAN_CARPET = register("tan_carpet", new DyedCarpetBlock(VADyeColors.TAN, Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME)));
        TAN_TERRACOTTA = register("tan_terracotta", new Block(Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME)));
        TAN_CONCRETE = register("tan_concrete", new Block(Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME)));
        TAN_CONCRETE_POWDER = register("tan_concrete_powder", new ConcretePowderBlock(TAN_CONCRETE, Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME)));
        TAN_STAINED_GLASS = register("tan_stained_glass", new StainedGlassBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME)));
        TAN_STAINED_GLASS_PANE = register("tan_stained_glass_pane", new StainedGlassPaneBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME)));
        TAN_SILKBULB = register("tan_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.LIME)));
        TAN_CANDLE = register("tan_candle", new CandleBlock(Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME)));
        TAN_CANDLE_CAKE = register("tan_candle_cake", new CandleCakeBlock(TAN_CANDLE, Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME)));
        TAN_BED = register("tan_bed", new CustomBedBlock(VADyeColors.TAN, Settings.copy(Blocks.WHITE_BED)));
        TAN_SHULKER_BOX = register("tan_shulker_box", new CustomShulkerBoxBlock(VADyeColors.TAN, Settings.copy(Blocks.SHULKER_BOX)));
        TAN_BANNER = register("tan_banner", new CustomBannerBlock(VADyeColors.TAN, Settings.copy(Blocks.WHITE_BANNER)));
        TAN_WALL_BANNER = register("tan_wall_banner", new CustomWallBannerBlock(VADyeColors.TAN, Settings.copy(Blocks.WHITE_WALL_BANNER).dropsLike(TAN_BANNER)));
        TAN_GLAZED_TERRACOTTA = register("tan_glazed_terracotta", new GlazedTerracottaBlock(Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.TAN)));

        SINOPIA_WOOL = register("sinopia_wool", new Block(Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME)));
        SINOPIA_CARPET = register("sinopia_carpet", new DyedCarpetBlock(VADyeColors.SINOPIA, Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME)));
        SINOPIA_TERRACOTTA = register("sinopia_terracotta", new Block(Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME)));
        SINOPIA_CONCRETE = register("sinopia_concrete", new Block(Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME)));
        SINOPIA_CONCRETE_POWDER = register("sinopia_concrete_powder", new ConcretePowderBlock(SINOPIA_CONCRETE, Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME)));
        SINOPIA_STAINED_GLASS = register("sinopia_stained_glass", new StainedGlassBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME)));
        SINOPIA_STAINED_GLASS_PANE = register("sinopia_stained_glass_pane", new StainedGlassPaneBlock(DyeColor.LIME, Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME)));
        SINOPIA_SILKBULB = register("sinopia_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.LIME)));
        SINOPIA_CANDLE = register("sinopia_candle", new CandleBlock(Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME)));
        SINOPIA_CANDLE_CAKE = register("sinopia_candle_cake", new CandleCakeBlock(SINOPIA_CANDLE, Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME)));
        SINOPIA_BED = register("sinopia_bed", new CustomBedBlock(VADyeColors.SINOPIA, Settings.copy(Blocks.WHITE_BED)));
        SINOPIA_SHULKER_BOX = register("sinopia_shulker_box", new CustomShulkerBoxBlock(VADyeColors.SINOPIA, Settings.copy(Blocks.SHULKER_BOX)));
        SINOPIA_BANNER = register("sinopia_banner", new CustomBannerBlock(VADyeColors.SINOPIA, Settings.copy(Blocks.WHITE_BANNER)));
        SINOPIA_WALL_BANNER = register("sinopia_wall_banner", new CustomWallBannerBlock(VADyeColors.SINOPIA, Settings.copy(Blocks.WHITE_WALL_BANNER).dropsLike(SINOPIA_BANNER)));
        SINOPIA_GLAZED_TERRACOTTA = register("sinopia_glazed_terracotta", new GlazedTerracottaBlock(Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.SINOPIA)));

        LILAC_WOOL = register("lilac_wool", new Block(Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME)));
        LILAC_CARPET = register("lilac_carpet", new DyedCarpetBlock(VADyeColors.LILAC, Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME)));
        LILAC_TERRACOTTA = register("lilac_terracotta", new Block(Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME)));
        LILAC_CONCRETE = register("lilac_concrete", new Block(Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME)));
        LILAC_CONCRETE_POWDER = register("lilac_concrete_powder", new ConcretePowderBlock(LILAC_CONCRETE, Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME)));
        LILAC_STAINED_GLASS = register("lilac_stained_glass", new StainedGlassBlock(VADyeColors.LILAC, Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME)));
        LILAC_STAINED_GLASS_PANE = register("lilac_stained_glass_pane", new StainedGlassPaneBlock(VADyeColors.LILAC, Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME)));
        LILAC_SILKBULB = register("lilac_silkbulb", new Block(Settings.copy(SILKBULB).mapColor(MapColor.LIME)));
        LILAC_CANDLE = register("lilac_candle", new CandleBlock(Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME)));
        LILAC_CANDLE_CAKE = register("lilac_candle_cake", new CandleCakeBlock(LILAC_CANDLE, Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME)));
        LILAC_BED = register("lilac_bed", new CustomBedBlock(VADyeColors.LILAC, Settings.copy(Blocks.WHITE_BED)));
        LILAC_SHULKER_BOX = register("lilac_shulker_box", new CustomShulkerBoxBlock(VADyeColors.LILAC, Settings.copy(Blocks.SHULKER_BOX)));
        LILAC_BANNER = register("lilac_banner", new CustomBannerBlock(VADyeColors.LILAC, Settings.copy(Blocks.WHITE_BANNER)));
        LILAC_WALL_BANNER = register("lilac_wall_banner", new CustomWallBannerBlock(VADyeColors.LILAC, Settings.copy(Blocks.WHITE_WALL_BANNER).dropsLike(LILAC_BANNER)));
        LILAC_GLAZED_TERRACOTTA = register("lilac_glazed_terracotta", new GlazedTerracottaBlock(Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.LILAC)));

        COLORING_STATION = register("coloring_station", new ColoringStationBlock(Settings.copy(Blocks.SMITHING_TABLE)));

        ACID = register("acid", new AcidFluidBlock(VAFluids.ACID, Settings.create().mapColor(MapColor.LIME).luminance(((state) -> 6)).sounds(BlockSoundGroup.INTENTIONALLY_EMPTY).replaceable().noCollision().strength(100.0F).dropsNothing().allowsSpawning(((state, world, pos, type) -> type == VAEntityType.LUMWASP)).pistonBehavior(PistonBehavior.DESTROY)));
        ACID_BLOCK = register("acid_block", new AcidBlock(Settings.create().mapColor(MapColor.LIME).breakInstantly().sounds(BlockSoundGroup.HONEY).nonOpaque().solidBlock((state, world, pos) -> false)));

        IOLITE_ORE = register("iolite_ore", new ExperienceDroppingBlock(UniformIntProvider.create(5, 9), Settings.copy(Blocks.END_STONE).strength(4.5F, 4.5F).requiresTool()));
        IOLITE_BLOCK = register("iolite_block", new Block(Settings.create().mapColor(MapColor.MAGENTA).sounds(BlockSoundGroup.METAL).requiresTool().hardness(5.0F).resistance(300.0F)));
        WARP_ANCHOR = register("warp_anchor", new WarpAnchorBlock(Settings.create().nonOpaque().sounds(BlockSoundGroup.NETHERITE).luminance(state -> 3).emissiveLighting( (state, world, pos) -> !state.get(WarpAnchorBlock.POWERED) ).hardness(22.5F).requiresTool().resistance(600.0F)));
        WARP_TETHER = register("warp_tether", new WarpTetherBlock(Settings.create().nonOpaque().sounds(BlockSoundGroup.NETHERITE).luminance(state -> 3).emissiveLighting( (state, world, pos) -> !state.get(WarpTetherBlock.COOLDOWN) ).hardness(22.5F).requiresTool().resistance(600.0F)));
        ENTANGLEMENT_DRIVE = register("entanglement_drive", new EntanglementDriveBlock(Settings.create().nonOpaque().sounds(BlockSoundGroup.NETHERITE).luminance(state -> 3).emissiveLighting( (state, world, pos) -> !state.get(Properties.POWERED) ).hardness(22.5F).requiresTool().resistance(600.0F)));

        DESTRUCTIVE_SCULK = register("destructive_sculk", new DestructiveSculkBlock(Settings.copy(Blocks.SCULK)));
        WIND = register("wind", new WindBlock(Settings.copy(Blocks.AIR)));

        setBlocksInitialized();
    }

    public static void init(){
        LandPathNodeTypesRegistry.register(ACID, PathNodeType.LAVA, PathNodeType.DANGER_FIRE);

        FireBlock fire = (FireBlock) Blocks.FIRE;
        fire.registerFlammableBlock(CLIMBING_ROPE_ANCHOR, 5, 20);
        fire.registerFlammableBlock(CLIMBING_ROPE, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_LOG, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_WOOD, 5, 20);
        fire.registerFlammableBlock(STRIPPED_AEROBLOOM_LOG, 5, 20);
        fire.registerFlammableBlock(STRIPPED_AEROBLOOM_WOOD, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_PLANKS, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_STAIRS, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_SLAB, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_FENCE, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_LEAVES, 30, 60);
        fire.registerFlammableBlock(AEROBLOOM_HEDGE, 30, 60);
        fire.registerFlammableBlock(OAK_HEDGE, 30, 60);
        fire.registerFlammableBlock(SPRUCE_HEDGE, 30, 60);
        fire.registerFlammableBlock(BIRCH_HEDGE, 30, 60);
        fire.registerFlammableBlock(JUNGLE_HEDGE, 30, 60);
        fire.registerFlammableBlock(ACACIA_HEDGE, 30, 60);
        fire.registerFlammableBlock(DARK_OAK_HEDGE, 30, 60);
        fire.registerFlammableBlock(MANGROVE_HEDGE, 30, 60);
        fire.registerFlammableBlock(CHERRY_HEDGE, 30, 60);
        fire.registerFlammableBlock(AZALEA_HEDGE, 30, 60);
        fire.registerFlammableBlock(FLOWERING_AZALEA_HEDGE, 30, 60);
        fire.registerFlammableBlock(GLOWING_SILK, 30, 60);
        fire.registerFlammableBlock(FRAYED_SILK, 30, 60);
        fire.registerFlammableBlock(LUMWASP_NEST, 5, 20);
        fire.registerFlammableBlock(SILK_BLOCK, 5, 20);
        fire.registerFlammableBlock(WEBBED_SILK, 30, 60);
        fire.registerFlammableBlock(SILKBULB, 5, 20);
        fire.registerFlammableBlock(WHITE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(LIGHT_GRAY_SILKBULB, 5, 20);
        fire.registerFlammableBlock(GRAY_SILKBULB, 5, 20);
        fire.registerFlammableBlock(BLACK_SILKBULB, 5, 20);
        fire.registerFlammableBlock(BROWN_SILKBULB, 5, 20);
        fire.registerFlammableBlock(RED_SILKBULB, 5, 20);
        fire.registerFlammableBlock(ORANGE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(YELLOW_SILKBULB, 5, 20);
        fire.registerFlammableBlock(LIME_SILKBULB, 5, 20);
        fire.registerFlammableBlock(GREEN_SILKBULB, 5, 20);
        fire.registerFlammableBlock(CYAN_SILKBULB, 5, 20);
        fire.registerFlammableBlock(LIGHT_BLUE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(BLUE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(PURPLE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(MAGENTA_SILKBULB, 5, 20);
        fire.registerFlammableBlock(PINK_SILKBULB, 5, 20);
        fire.registerFlammableBlock(CHARTREUSE_WOOL, 30, 60);
        fire.registerFlammableBlock(CHARTREUSE_CARPET, 60, 20);
        fire.registerFlammableBlock(CHARTREUSE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(MAROON_WOOL, 30, 60);
        fire.registerFlammableBlock(MAROON_CARPET, 60, 20);
        fire.registerFlammableBlock(MAROON_SILKBULB, 5, 20);
        fire.registerFlammableBlock(INDIGO_WOOL, 30, 60);
        fire.registerFlammableBlock(INDIGO_CARPET, 60, 20);
        fire.registerFlammableBlock(INDIGO_SILKBULB, 5, 20);
        fire.registerFlammableBlock(PLUM_WOOL, 30, 60);
        fire.registerFlammableBlock(PLUM_CARPET, 60, 20);
        fire.registerFlammableBlock(PLUM_SILKBULB, 5, 20);
        fire.registerFlammableBlock(VIRIDIAN_WOOL, 30, 60);
        fire.registerFlammableBlock(VIRIDIAN_CARPET, 60, 20);
        fire.registerFlammableBlock(VIRIDIAN_SILKBULB, 5, 20);
        fire.registerFlammableBlock(TAN_WOOL, 30, 60);
        fire.registerFlammableBlock(TAN_CARPET, 60, 20);
        fire.registerFlammableBlock(TAN_SILKBULB, 5, 20);
        fire.registerFlammableBlock(SINOPIA_WOOL, 30, 60);
        fire.registerFlammableBlock(SINOPIA_CARPET, 60, 20);
        fire.registerFlammableBlock(SINOPIA_SILKBULB, 5, 20);
        fire.registerFlammableBlock(LILAC_WOOL, 30, 60);
        fire.registerFlammableBlock(LILAC_CARPET, 60, 20);
        fire.registerFlammableBlock(LILAC_SILKBULB, 5, 20);
        StrippableBlockRegistry.register(AEROBLOOM_LOG, STRIPPED_AEROBLOOM_LOG);
        StrippableBlockRegistry.register(AEROBLOOM_WOOD, STRIPPED_AEROBLOOM_WOOD);

    }

}
