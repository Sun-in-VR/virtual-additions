package com.github.suninvr.virtualadditions.registry;

import com.github.suninvr.virtualadditions.VirtualAdditions;
import com.github.suninvr.virtualadditions.block.*;
import net.fabricmc.fabric.api.object.builder.v1.block.type.BlockSetTypeBuilder;
import net.fabricmc.fabric.api.object.builder.v1.block.type.WoodTypeBuilder;
import net.fabricmc.fabric.api.registry.*;
import net.minecraft.block.*;
import net.minecraft.block.AbstractBlock.Settings;
import net.minecraft.block.enums.NoteBlockInstrument;
import net.minecraft.block.piston.PistonBehavior;
import net.minecraft.entity.ai.pathing.PathNodeType;
import net.minecraft.sound.BlockSoundGroup;
import net.minecraft.sound.SoundEvents;
import net.minecraft.state.property.Properties;
import net.minecraft.util.math.intprovider.ConstantIntProvider;
import net.minecraft.util.math.intprovider.UniformIntProvider;

import static com.github.suninvr.virtualadditions.VirtualAdditions.idOf;
import static com.github.suninvr.virtualadditions.VirtualAdditions.setBlocksInitialized;
import static com.github.suninvr.virtualadditions.registry.RegistryHelper.BlockRegistryHelper.register;

public class VABlocks {

    public static final BlockSoundGroup ROPE_SOUND_GROUP = new BlockSoundGroup(1.0F, 1.0F, VASoundEvents.BLOCK_ROPE_BREAK, VASoundEvents.BLOCK_ROPE_STEP, VASoundEvents.BLOCK_ROPE_PLACE, VASoundEvents.BLOCK_ROPE_HIT, VASoundEvents.BLOCK_ROPE_FALL);
    public static final BlockSoundGroup GRASSY_FLOATROCK_SOUNDGROUP = new BlockSoundGroup(1.0F, 1.0F, SoundEvents.BLOCK_TUFF_BREAK, SoundEvents.BLOCK_GRASS_STEP, SoundEvents.BLOCK_TUFF_PLACE, SoundEvents.BLOCK_TUFF_HIT, SoundEvents.BLOCK_GRASS_FALL);

    public static final Block CLIMBING_ROPE;
    public static final Block CLIMBING_ROPE_ANCHOR;
    public static final Block EXPOSED_CLIMBING_ROPE_ANCHOR;
    public static final Block WEATHERED_CLIMBING_ROPE_ANCHOR;
    public static final Block OXIDIZED_CLIMBING_ROPE_ANCHOR;
    public static final Block WAXED_CLIMBING_ROPE_ANCHOR;
    public static final Block WAXED_EXPOSED_CLIMBING_ROPE_ANCHOR;
    public static final Block WAXED_WEATHERED_CLIMBING_ROPE_ANCHOR;
    public static final Block WAXED_OXIDIZED_CLIMBING_ROPE_ANCHOR;
    public static final Block RAW_STEEL_BLOCK;
    public static final Block STEEL_BLOCK;
    public static final Block EXPOSED_STEEL_BLOCK;
    public static final Block WEATHERED_STEEL_BLOCK;
    public static final Block OXIDIZED_STEEL_BLOCK;
    public static final Block WAXED_STEEL_BLOCK;
    public static final Block WAXED_EXPOSED_STEEL_BLOCK;
    public static final Block WAXED_WEATHERED_STEEL_BLOCK;
    public static final Block WAXED_OXIDIZED_STEEL_BLOCK;
    public static final Block CUT_STEEL;
    public static final Block CUT_STEEL_STAIRS;
    public static final Block CUT_STEEL_SLAB;
    public static final Block EXPOSED_CUT_STEEL;
    public static final Block EXPOSED_CUT_STEEL_STAIRS;
    public static final Block EXPOSED_CUT_STEEL_SLAB;
    public static final Block WEATHERED_CUT_STEEL;
    public static final Block WEATHERED_CUT_STEEL_STAIRS;
    public static final Block WEATHERED_CUT_STEEL_SLAB;
    public static final Block OXIDIZED_CUT_STEEL;
    public static final Block OXIDIZED_CUT_STEEL_STAIRS;
    public static final Block OXIDIZED_CUT_STEEL_SLAB;
    public static final Block WAXED_CUT_STEEL;
    public static final Block WAXED_CUT_STEEL_STAIRS;
    public static final Block WAXED_CUT_STEEL_SLAB;
    public static final Block WAXED_EXPOSED_CUT_STEEL;
    public static final Block WAXED_EXPOSED_CUT_STEEL_STAIRS;
    public static final Block WAXED_EXPOSED_CUT_STEEL_SLAB;
    public static final Block WAXED_WEATHERED_CUT_STEEL;
    public static final Block WAXED_WEATHERED_CUT_STEEL_STAIRS;
    public static final Block WAXED_WEATHERED_CUT_STEEL_SLAB;
    public static final Block WAXED_OXIDIZED_CUT_STEEL;
    public static final Block WAXED_OXIDIZED_CUT_STEEL_STAIRS;
    public static final Block WAXED_OXIDIZED_CUT_STEEL_SLAB;
    public static final Block STEEL_GRATE;
    public static final Block EXPOSED_STEEL_GRATE;
    public static final Block WEATHERED_STEEL_GRATE;
    public static final Block OXIDIZED_STEEL_GRATE;
    public static final Block WAXED_STEEL_GRATE;
    public static final Block WAXED_EXPOSED_STEEL_GRATE;
    public static final Block WAXED_WEATHERED_STEEL_GRATE;
    public static final Block WAXED_OXIDIZED_STEEL_GRATE;
    public static final Block CHISELED_STEEL;
    public static final Block EXPOSED_CHISELED_STEEL;
    public static final Block WEATHERED_CHISELED_STEEL;
    public static final Block OXIDIZED_CHISELED_STEEL;
    public static final Block WAXED_CHISELED_STEEL;
    public static final Block WAXED_EXPOSED_CHISELED_STEEL;
    public static final Block WAXED_WEATHERED_CHISELED_STEEL;
    public static final Block WAXED_OXIDIZED_CHISELED_STEEL;
    public static final Block STEEL_FENCE;
    public static final Block EXPOSED_STEEL_FENCE;
    public static final Block WEATHERED_STEEL_FENCE;
    public static final Block OXIDIZED_STEEL_FENCE;
    public static final Block WAXED_STEEL_FENCE;
    public static final Block WAXED_EXPOSED_STEEL_FENCE;
    public static final Block WAXED_WEATHERED_STEEL_FENCE;
    public static final Block WAXED_OXIDIZED_STEEL_FENCE;
    public static final Block STEEL_DOOR;
    public static final Block EXPOSED_STEEL_DOOR;
    public static final Block WEATHERED_STEEL_DOOR;
    public static final Block OXIDIZED_STEEL_DOOR;
    public static final Block WAXED_STEEL_DOOR;
    public static final Block WAXED_EXPOSED_STEEL_DOOR;
    public static final Block WAXED_WEATHERED_STEEL_DOOR;
    public static final Block WAXED_OXIDIZED_STEEL_DOOR;
    public static final Block STEEL_TRAPDOOR;
    public static final Block EXPOSED_STEEL_TRAPDOOR;
    public static final Block WEATHERED_STEEL_TRAPDOOR;
    public static final Block OXIDIZED_STEEL_TRAPDOOR;
    public static final Block WAXED_STEEL_TRAPDOOR;
    public static final Block WAXED_EXPOSED_STEEL_TRAPDOOR;
    public static final Block WAXED_WEATHERED_STEEL_TRAPDOOR;
    public static final Block WAXED_OXIDIZED_STEEL_TRAPDOOR;
    public static final Block REDSTONE_BRIDGE;
    public static final Block SPOTLIGHT;
    public static final Block SPOTLIGHT_LIGHT;
    public static final Block CAGELIGHT;
    public static final Block HORNFELS;
    public static final Block COBBLED_HORNFELS;
    public static final Block COBBLED_HORNFELS_STAIRS;
    public static final Block COBBLED_HORNFELS_SLAB;
    public static final Block COBBLED_HORNFELS_WALL;
    public static final Block POLISHED_HORNFELS;
    public static final Block POLISHED_HORNFELS_STAIRS;
    public static final Block POLISHED_HORNFELS_SLAB;
    public static final Block HORNFELS_TILES;
    public static final Block CRACKED_HORNFELS_TILES;
    public static final Block HORNFELS_TILE_STAIRS;
    public static final Block HORNFELS_TILE_SLAB;
    public static final Block CHISELED_HORNFELS;
    public static final Block CHISELED_HORNFELS_TILES;
    public static final Block BLUESCHIST;
    public static final Block COBBLED_BLUESCHIST;
    public static final Block COBBLED_BLUESCHIST_STAIRS;
    public static final Block COBBLED_BLUESCHIST_SLAB;
    public static final Block COBBLED_BLUESCHIST_WALL;
    public static final Block POLISHED_BLUESCHIST;
    public static final Block POLISHED_BLUESCHIST_STAIRS;
    public static final Block POLISHED_BLUESCHIST_SLAB;
    public static final Block BLUESCHIST_BRICKS;
    public static final Block CRACKED_BLUESCHIST_BRICKS;
    public static final Block BLUESCHIST_BRICK_STAIRS;
    public static final Block BLUESCHIST_BRICK_SLAB;
    public static final Block BLUESCHIST_BRICK_WALL;
    public static final Block CHISELED_BLUESCHIST;
    public static final Block SYENITE;
    public static final Block COBBLED_SYENITE;
    public static final Block COBBLED_SYENITE_STAIRS;
    public static final Block COBBLED_SYENITE_SLAB;
    public static final Block COBBLED_SYENITE_WALL;
    public static final Block POLISHED_SYENITE;
    public static final Block POLISHED_SYENITE_STAIRS;
    public static final Block POLISHED_SYENITE_SLAB;
    public static final Block SYENITE_BRICKS;
    public static final Block CRACKED_SYENITE_BRICKS;
    public static final Block SYENITE_BRICK_STAIRS;
    public static final Block SYENITE_BRICK_SLAB;
    public static final Block SYENITE_BRICK_WALL;
    public static final Block CHISELED_SYENITE;
    public static final Block ROCK_SALT_BLOCK;
    public static final Block ROCK_SALT_CRYSTAL;
    public static final Block COTTON;
    public static final Block CORN_CROP;
    public static final Block FLOATROCK;
    public static final Block GRASSY_FLOATROCK;
    public static final Block FLOATROCK_STAIRS;
    public static final Block FLOATROCK_SLAB;
    public static final Block FLOATROCK_WALL;
    public static final Block FLOATROCK_BRICKS;
    public static final Block FLOATROCK_BRICK_STAIRS;
    public static final Block FLOATROCK_BRICK_SLAB;
    public static final Block FLOATROCK_BRICK_WALL;
    public static final Block POLISHED_FLOATROCK;
    public static final Block POLISHED_FLOATROCK_STAIRS;
    public static final Block POLISHED_FLOATROCK_SLAB;
    public static final Block POLISHED_FLOATROCK_WALL;
    public static final Block FLOATROCK_COAL_ORE;
    public static final Block FLOATROCK_IRON_ORE;
    public static final Block FLOATROCK_COPPER_ORE;
    public static final Block FLOATROCK_GOLD_ORE;
    public static final Block FLOATROCK_REDSTONE_ORE;
    public static final Block FLOATROCK_EMERALD_ORE;
    public static final Block FLOATROCK_LAPIS_ORE;
    public static final Block FLOATROCK_DIAMOND_ORE;
    public static final Block SPRINGSOIL;
    public static final Block AEROBLOOM_LOG;
    public static final Block AEROBLOOM_WOOD;
    public static final Block STRIPPED_AEROBLOOM_LOG;
    public static final Block STRIPPED_AEROBLOOM_WOOD;
    public static final Block AEROBLOOM_PLANKS;
    public static final Block AEROBLOOM_STAIRS;
    public static final Block AEROBLOOM_SLAB;
    public static final Block AEROBLOOM_FENCE;
    public static final Block AEROBLOOM_FENCE_GATE;
    public static final Block AEROBLOOM_DOOR;
    public static final Block AEROBLOOM_TRAPDOOR;
    public static final Block AEROBLOOM_PRESSURE_PLATE;
    public static final Block AEROBLOOM_BUTTON;
    public static final Block AEROBLOOM_SIGN;
    public static final Block AEROBLOOM_WALL_SIGN;
    public static final Block AEROBLOOM_HANGING_SIGN;
    public static final Block AEROBLOOM_WALL_HANGING_SIGN;
    public static final Block AEROBLOOM_LEAVES;
    public static final Block AEROBLOOM_SAPLING;
    public static final Block POTTED_AEROBLOOM_SAPLING;
    public static final Block BALLOON_BULB;
    public static final Block BALLOON_BULB_PLANT;
    public static final Block BALLOON_BULB_BUD;
    public static final Block OAK_HEDGE;
    public static final Block SPRUCE_HEDGE;
    public static final Block BIRCH_HEDGE;
    public static final Block JUNGLE_HEDGE;
    public static final Block ACACIA_HEDGE;
    public static final Block DARK_OAK_HEDGE;
    public static final Block PALE_OAK_HEDGE;
    public static final Block MANGROVE_HEDGE;
    public static final Block CHERRY_HEDGE;
    public static final Block AEROBLOOM_HEDGE;
    public static final Block AZALEA_HEDGE;
    public static final Block FLOWERING_AZALEA_HEDGE;
    public static final Block GLOWING_SILK;
    public static final Block FRAYED_SILK;
    public static final Block LUMWASP_NEST;
    public static final Block SILK_BLOCK;
    public static final Block GREENCAP_MUSHROOM;
    public static final Block TALL_GREENCAP_MUSHROOMS;
    public static final Block POTTED_GREENCAP_MUSHROOM;
    public static final Block WEBBED_SILK;
    public static final Block SILKBULB;
    public static final Block WHITE_SILKBULB;
    public static final Block LIGHT_GRAY_SILKBULB;
    public static final Block GRAY_SILKBULB;
    public static final Block BLACK_SILKBULB;
    public static final Block BROWN_SILKBULB;
    public static final Block RED_SILKBULB;
    public static final Block ORANGE_SILKBULB;
    public static final Block YELLOW_SILKBULB;
    public static final Block LIME_SILKBULB;
    public static final Block GREEN_SILKBULB;
    public static final Block CYAN_SILKBULB;
    public static final Block LIGHT_BLUE_SILKBULB;
    public static final Block BLUE_SILKBULB;
    public static final Block PURPLE_SILKBULB;
    public static final Block MAGENTA_SILKBULB;
    public static final Block PINK_SILKBULB;
    public static final Block CHARTREUSE_WOOL;
    public static final Block CHARTREUSE_CARPET;
    public static final Block CHARTREUSE_TERRACOTTA;
    public static final Block CHARTREUSE_CONCRETE;
    public static final Block CHARTREUSE_CONCRETE_POWDER;
    public static final Block CHARTREUSE_STAINED_GLASS;
    public static final Block CHARTREUSE_STAINED_GLASS_PANE;
    public static final Block CHARTREUSE_SILKBULB;
    public static final Block CHARTREUSE_CANDLE;
    public static final Block CHARTREUSE_CANDLE_CAKE;
    public static final Block CHARTREUSE_BED;
    public static final Block CHARTREUSE_SHULKER_BOX;
    public static final Block CHARTREUSE_BANNER;
    public static final Block CHARTREUSE_WALL_BANNER;
    public static final Block CHARTREUSE_GLAZED_TERRACOTTA;
    public static final Block MAROON_WOOL;
    public static final Block MAROON_CARPET;
    public static final Block MAROON_TERRACOTTA;
    public static final Block MAROON_CONCRETE;
    public static final Block MAROON_CONCRETE_POWDER;
    public static final Block MAROON_STAINED_GLASS;
    public static final Block MAROON_STAINED_GLASS_PANE;
    public static final Block MAROON_SILKBULB;
    public static final Block MAROON_CANDLE;
    public static final Block MAROON_CANDLE_CAKE;
    public static final Block MAROON_BED;
    public static final Block MAROON_SHULKER_BOX;
    public static final Block MAROON_BANNER;
    public static final Block MAROON_WALL_BANNER;
    public static final Block MAROON_GLAZED_TERRACOTTA;
    public static final Block INDIGO_WOOL;
    public static final Block INDIGO_CARPET;
    public static final Block INDIGO_TERRACOTTA;
    public static final Block INDIGO_CONCRETE;
    public static final Block INDIGO_CONCRETE_POWDER;
    public static final Block INDIGO_STAINED_GLASS;
    public static final Block INDIGO_STAINED_GLASS_PANE;
    public static final Block INDIGO_SILKBULB;
    public static final Block INDIGO_CANDLE;
    public static final Block INDIGO_CANDLE_CAKE;
    public static final Block INDIGO_BED;
    public static final Block INDIGO_SHULKER_BOX;
    public static final Block INDIGO_BANNER;
    public static final Block INDIGO_WALL_BANNER;
    public static final Block INDIGO_GLAZED_TERRACOTTA;
    public static final Block PLUM_WOOL;
    public static final Block PLUM_CARPET;
    public static final Block PLUM_TERRACOTTA;
    public static final Block PLUM_CONCRETE;
    public static final Block PLUM_CONCRETE_POWDER;
    public static final Block PLUM_STAINED_GLASS;
    public static final Block PLUM_STAINED_GLASS_PANE;
    public static final Block PLUM_SILKBULB;
    public static final Block PLUM_CANDLE;
    public static final Block PLUM_CANDLE_CAKE;
    public static final Block PLUM_BED;
    public static final Block PLUM_SHULKER_BOX;
    public static final Block PLUM_BANNER;
    public static final Block PLUM_WALL_BANNER;
    public static final Block PLUM_GLAZED_TERRACOTTA;
    public static final Block VIRIDIAN_WOOL;
    public static final Block VIRIDIAN_CARPET;
    public static final Block VIRIDIAN_TERRACOTTA;
    public static final Block VIRIDIAN_CONCRETE;
    public static final Block VIRIDIAN_CONCRETE_POWDER;
    public static final Block VIRIDIAN_STAINED_GLASS;
    public static final Block VIRIDIAN_STAINED_GLASS_PANE;
    public static final Block VIRIDIAN_SILKBULB;
    public static final Block VIRIDIAN_CANDLE;
    public static final Block VIRIDIAN_CANDLE_CAKE;
    public static final Block VIRIDIAN_BED;
    public static final Block VIRIDIAN_SHULKER_BOX;
    public static final Block VIRIDIAN_BANNER;
    public static final Block VIRIDIAN_WALL_BANNER;
    public static final Block VIRIDIAN_GLAZED_TERRACOTTA;
    public static final Block TAN_WOOL;
    public static final Block TAN_CARPET;
    public static final Block TAN_TERRACOTTA;
    public static final Block TAN_CONCRETE;
    public static final Block TAN_CONCRETE_POWDER;
    public static final Block TAN_STAINED_GLASS;
    public static final Block TAN_STAINED_GLASS_PANE;
    public static final Block TAN_SILKBULB;
    public static final Block TAN_CANDLE;
    public static final Block TAN_CANDLE_CAKE;
    public static final Block TAN_BED;
    public static final Block TAN_SHULKER_BOX;
    public static final Block TAN_BANNER;
    public static final Block TAN_WALL_BANNER;
    public static final Block TAN_GLAZED_TERRACOTTA;
    public static final Block SINOPIA_WOOL;
    public static final Block SINOPIA_CARPET;
    public static final Block SINOPIA_TERRACOTTA;
    public static final Block SINOPIA_CONCRETE;
    public static final Block SINOPIA_CONCRETE_POWDER;
    public static final Block SINOPIA_STAINED_GLASS;
    public static final Block SINOPIA_STAINED_GLASS_PANE;
    public static final Block SINOPIA_SILKBULB;
    public static final Block SINOPIA_CANDLE;
    public static final Block SINOPIA_CANDLE_CAKE;
    public static final Block SINOPIA_BED;
    public static final Block SINOPIA_SHULKER_BOX;
    public static final Block SINOPIA_BANNER;
    public static final Block SINOPIA_WALL_BANNER;
    public static final Block SINOPIA_GLAZED_TERRACOTTA;
    public static final Block LILAC_WOOL;
    public static final Block LILAC_CARPET;
    public static final Block LILAC_TERRACOTTA;
    public static final Block LILAC_CONCRETE;
    public static final Block LILAC_CONCRETE_POWDER;
    public static final Block LILAC_STAINED_GLASS;
    public static final Block LILAC_STAINED_GLASS_PANE;
    public static final Block LILAC_SILKBULB;
    public static final Block LILAC_CANDLE;
    public static final Block LILAC_CANDLE_CAKE;
    public static final Block LILAC_BED;
    public static final Block LILAC_SHULKER_BOX;
    public static final Block LILAC_BANNER;
    public static final Block LILAC_WALL_BANNER;
    public static final Block LILAC_GLAZED_TERRACOTTA;
    public static final Block COLORING_STATION;
    public static final Block ACID;
    public static final Block ACID_BLOCK;
    public static final Block IOLITE_ORE;
    public static final Block IOLITE_BLOCK;
    public static final Block WARP_ANCHOR;
    public static final Block WARP_TETHER;
    public static final Block ENTANGLEMENT_DRIVE;
    public static final Block REMOTE_NOTIFIER;
    public static final Block DESTRUCTIVE_SCULK;
    public static final Block WIND;

    public static final BlockSetType AEROBLOOM = BlockSetTypeBuilder.copyOf(BlockSetType.CHERRY).build(idOf("aerobloom"));
    public static final WoodType AEROBLOOM_WOODTYPE = WoodType.register(WoodTypeBuilder.copyOf(WoodType.CHERRY).build(idOf("aerobloom"), AEROBLOOM));

    public static final BlockSetType STEEL_BLOCK_SET_TYPE;

    static {
        STEEL_BLOCK_SET_TYPE = new BlockSetType("steel", false, false, false, BlockSetType.ActivationRule.EVERYTHING, BlockSoundGroup.NETHERITE, SoundEvents.BLOCK_IRON_DOOR_CLOSE, SoundEvents.BLOCK_IRON_DOOR_OPEN, SoundEvents.BLOCK_IRON_TRAPDOOR_CLOSE, SoundEvents.BLOCK_IRON_TRAPDOOR_OPEN, SoundEvents.BLOCK_METAL_PRESSURE_PLATE_CLICK_OFF, SoundEvents.BLOCK_METAL_PRESSURE_PLATE_CLICK_ON, SoundEvents.BLOCK_STONE_BUTTON_CLICK_OFF, SoundEvents.BLOCK_STONE_BUTTON_CLICK_ON);

        CLIMBING_ROPE = register("climbing_rope", ClimbingRopeBlock::new, Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F));
        CLIMBING_ROPE_ANCHOR = register("climbing_rope_anchor",  (settings) -> new OxidizableClimbingRopeAnchor(settings, Oxidizable.OxidationLevel.UNAFFECTED), (Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F)));
        EXPOSED_CLIMBING_ROPE_ANCHOR = register("exposed_climbing_rope_anchor",  (settings) -> new OxidizableClimbingRopeAnchor(settings, Oxidizable.OxidationLevel.EXPOSED), (Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F)));
        WEATHERED_CLIMBING_ROPE_ANCHOR = register("weathered_climbing_rope_anchor",  (settings) -> new OxidizableClimbingRopeAnchor(settings, Oxidizable.OxidationLevel.WEATHERED), (Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F)));
        OXIDIZED_CLIMBING_ROPE_ANCHOR = register("oxidized_climbing_rope_anchor",  (settings) -> new OxidizableClimbingRopeAnchor(settings, Oxidizable.OxidationLevel.OXIDIZED), (Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F)));
        WAXED_CLIMBING_ROPE_ANCHOR = register("waxed_climbing_rope_anchor", ClimbingRopeAnchorBlock::new, Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F));
        WAXED_EXPOSED_CLIMBING_ROPE_ANCHOR = register("waxed_exposed_climbing_rope_anchor", ClimbingRopeAnchorBlock::new, Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F));
        WAXED_WEATHERED_CLIMBING_ROPE_ANCHOR = register("waxed_weathered_climbing_rope_anchor", ClimbingRopeAnchorBlock::new, Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F));
        WAXED_OXIDIZED_CLIMBING_ROPE_ANCHOR = register("waxed_oxidized_climbing_rope_anchor", ClimbingRopeAnchorBlock::new, Settings.create().sounds(ROPE_SOUND_GROUP).pistonBehavior(PistonBehavior.DESTROY).noCollision().nonOpaque().burnable().hardness(0.5F));

        RAW_STEEL_BLOCK = register("raw_steel_block", Block::new, Settings.create().mapColor(MapColor.GRAY).requiresTool().strength(5.0F, 300.0F));
        STEEL_BLOCK = register("steel_block", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.UNAFFECTED, settings), Settings.create().mapColor(MapColor.GRAY).sounds(BlockSoundGroup.NETHERITE).requiresTool().hardness(5.0F).resistance(300.0F));
        CUT_STEEL = register("cut_steel", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.UNAFFECTED, settings), Settings.copy(STEEL_BLOCK).strength(3.0F, 300.0F));
        CUT_STEEL_STAIRS = register("cut_steel_stairs", (settings) -> new OxidizableStairsBlock(Oxidizable.OxidationLevel.UNAFFECTED, CUT_STEEL.getDefaultState(), settings), Settings.copy(CUT_STEEL));
        CUT_STEEL_SLAB = register("cut_steel_slab", (settings) -> new OxidizableSlabBlock(Oxidizable.OxidationLevel.UNAFFECTED, settings), Settings.copy(CUT_STEEL));
        STEEL_GRATE = register("steel_grate", (settings) -> new OxidizableGrateBlock(Oxidizable.OxidationLevel.UNAFFECTED, settings), Settings.copy(CUT_STEEL).strength(2.0F, 300.0F).nonOpaque());
        CHISELED_STEEL = register("chiseled_steel", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.UNAFFECTED, settings), Settings.copy(CUT_STEEL));
        STEEL_FENCE = register("steel_fence", (settings) -> new OxidizableFenceBlock( Oxidizable.OxidationLevel.UNAFFECTED, settings), Settings.copy(CUT_STEEL));
        STEEL_DOOR = register("steel_door", (settings) -> new OxidizableSteelDoorBlock(Oxidizable.OxidationLevel.UNAFFECTED, settings), Settings.copy(STEEL_BLOCK).nonOpaque().pistonBehavior(PistonBehavior.DESTROY));
        STEEL_TRAPDOOR = register("steel_trapdoor", (settings) -> new OxidizableSteelTrapdoorBlock(Oxidizable.OxidationLevel.UNAFFECTED, settings), Settings.copy(STEEL_DOOR));

        EXPOSED_STEEL_BLOCK = register("exposed_steel_block", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.EXPOSED, settings), Settings.create().mapColor(MapColor.GRAY).sounds(BlockSoundGroup.NETHERITE).requiresTool().hardness(5.0F).resistance(300.0F));
        EXPOSED_CUT_STEEL = register("exposed_cut_steel", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.EXPOSED, settings), Settings.copy(STEEL_BLOCK).strength(3.0F, 300.0F));
        EXPOSED_CUT_STEEL_STAIRS = register("exposed_cut_steel_stairs", (settings) -> new OxidizableStairsBlock(Oxidizable.OxidationLevel.EXPOSED, CUT_STEEL.getDefaultState(), settings), Settings.copy(CUT_STEEL));
        EXPOSED_CUT_STEEL_SLAB = register("exposed_cut_steel_slab", (settings) -> new OxidizableSlabBlock(Oxidizable.OxidationLevel.EXPOSED, settings), Settings.copy(CUT_STEEL));
        EXPOSED_STEEL_GRATE = register("exposed_steel_grate", (settings) -> new OxidizableGrateBlock(Oxidizable.OxidationLevel.EXPOSED, settings), Settings.copy(CUT_STEEL).strength(2.0F, 300.0F).nonOpaque());
        EXPOSED_CHISELED_STEEL = register("exposed_chiseled_steel", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.EXPOSED, settings), Settings.copy(CUT_STEEL));
        EXPOSED_STEEL_FENCE = register("exposed_steel_fence", (settings) -> new OxidizableFenceBlock( Oxidizable.OxidationLevel.EXPOSED, settings), Settings.copy(CUT_STEEL));
        EXPOSED_STEEL_DOOR = register("exposed_steel_door", (settings) -> new OxidizableSteelDoorBlock(Oxidizable.OxidationLevel.EXPOSED, settings), Settings.copy(STEEL_BLOCK).nonOpaque().pistonBehavior(PistonBehavior.DESTROY));
        EXPOSED_STEEL_TRAPDOOR = register("exposed_steel_trapdoor", (settings) -> new OxidizableSteelTrapdoorBlock(Oxidizable.OxidationLevel.EXPOSED, settings), Settings.copy(STEEL_DOOR));

        WEATHERED_STEEL_BLOCK = register("weathered_steel_block", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.WEATHERED, settings), Settings.create().mapColor(MapColor.GRAY).sounds(BlockSoundGroup.NETHERITE).requiresTool().hardness(5.0F).resistance(300.0F));
        WEATHERED_CUT_STEEL = register("weathered_cut_steel", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.WEATHERED, settings), Settings.copy(STEEL_BLOCK).strength(3.0F, 300.0F));
        WEATHERED_CUT_STEEL_STAIRS = register("weathered_cut_steel_stairs", (settings) -> new OxidizableStairsBlock(Oxidizable.OxidationLevel.WEATHERED, CUT_STEEL.getDefaultState(), settings), Settings.copy(CUT_STEEL));
        WEATHERED_CUT_STEEL_SLAB = register("weathered_cut_steel_slab", (settings) -> new OxidizableSlabBlock(Oxidizable.OxidationLevel.WEATHERED, settings), Settings.copy(CUT_STEEL));
        WEATHERED_STEEL_GRATE = register("weathered_steel_grate", (settings) -> new OxidizableGrateBlock(Oxidizable.OxidationLevel.WEATHERED, settings), Settings.copy(CUT_STEEL).strength(2.0F, 300.0F).nonOpaque());
        WEATHERED_CHISELED_STEEL = register("weathered_chiseled_steel", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.WEATHERED, settings), Settings.copy(CUT_STEEL));
        WEATHERED_STEEL_FENCE = register("weathered_steel_fence", (settings) -> new OxidizableFenceBlock( Oxidizable.OxidationLevel.WEATHERED, settings), Settings.copy(CUT_STEEL));
        WEATHERED_STEEL_DOOR = register("weathered_steel_door", (settings) -> new OxidizableSteelDoorBlock(Oxidizable.OxidationLevel.WEATHERED, settings), Settings.copy(STEEL_BLOCK).nonOpaque().pistonBehavior(PistonBehavior.DESTROY));
        WEATHERED_STEEL_TRAPDOOR = register("weathered_steel_trapdoor", (settings) -> new OxidizableSteelTrapdoorBlock(Oxidizable.OxidationLevel.WEATHERED, settings), Settings.copy(STEEL_DOOR));

        OXIDIZED_STEEL_BLOCK = register("oxidized_steel_block", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.OXIDIZED, settings), Settings.create().mapColor(MapColor.GRAY).sounds(BlockSoundGroup.NETHERITE).requiresTool().hardness(5.0F).resistance(300.0F));
        OXIDIZED_CUT_STEEL = register("oxidized_cut_steel", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.OXIDIZED, settings), Settings.copy(STEEL_BLOCK).strength(3.0F, 300.0F));
        OXIDIZED_CUT_STEEL_STAIRS = register("oxidized_cut_steel_stairs", (settings) -> new OxidizableStairsBlock(Oxidizable.OxidationLevel.OXIDIZED, CUT_STEEL.getDefaultState(), settings), Settings.copy(CUT_STEEL));
        OXIDIZED_CUT_STEEL_SLAB = register("oxidized_cut_steel_slab", (settings) -> new OxidizableSlabBlock(Oxidizable.OxidationLevel.OXIDIZED, settings), Settings.copy(CUT_STEEL));
        OXIDIZED_STEEL_GRATE = register("oxidized_steel_grate", (settings) -> new OxidizableGrateBlock(Oxidizable.OxidationLevel.OXIDIZED, settings), Settings.copy(CUT_STEEL).strength(2.0F, 300.0F).nonOpaque());
        OXIDIZED_CHISELED_STEEL = register("oxidized_chiseled_steel", (settings) -> new OxidizableBlock(Oxidizable.OxidationLevel.OXIDIZED, settings), Settings.copy(CUT_STEEL));
        OXIDIZED_STEEL_FENCE = register("oxidized_steel_fence", (settings) -> new OxidizableFenceBlock( Oxidizable.OxidationLevel.OXIDIZED, settings), Settings.copy(CUT_STEEL));
        OXIDIZED_STEEL_DOOR = register("oxidized_steel_door", (settings) -> new OxidizableSteelDoorBlock(Oxidizable.OxidationLevel.OXIDIZED, settings), Settings.copy(STEEL_BLOCK).nonOpaque().pistonBehavior(PistonBehavior.DESTROY));
        OXIDIZED_STEEL_TRAPDOOR = register("oxidized_steel_trapdoor", (settings) -> new OxidizableSteelTrapdoorBlock(Oxidizable.OxidationLevel.OXIDIZED, settings), Settings.copy(STEEL_DOOR));

        WAXED_STEEL_BLOCK = register("waxed_steel_block", Block::new, (Settings.create().mapColor(MapColor.GRAY).sounds(BlockSoundGroup.NETHERITE).requiresTool().hardness(5.0F).resistance(300.0F)));
        WAXED_CUT_STEEL = register("waxed_cut_steel", Block::new, (Settings.copy(STEEL_BLOCK).strength(3.0F, 300.0F)));
        WAXED_CUT_STEEL_STAIRS = register("waxed_cut_steel_stairs", settings -> new StairsBlock(CUT_STEEL.getDefaultState(), settings), Settings.copy(CUT_STEEL));
        WAXED_CUT_STEEL_SLAB = register("waxed_cut_steel_slab", SlabBlock::new, (Settings.copy(CUT_STEEL)));
        WAXED_STEEL_GRATE = register("waxed_steel_grate", GrateBlock::new, (Settings.copy(CUT_STEEL).strength(2.0F, 300.0F).nonOpaque()));
        WAXED_CHISELED_STEEL = register("waxed_chiseled_steel", Block::new, (Settings.copy(CUT_STEEL)));
        WAXED_STEEL_FENCE = register("waxed_steel_fence", FenceBlock::new, Settings.copy(CUT_STEEL));
        WAXED_STEEL_DOOR = register("waxed_steel_door", SteelDoorBlock::new, (Settings.copy(STEEL_BLOCK).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
        WAXED_STEEL_TRAPDOOR = register("waxed_steel_trapdoor", SteelTrapdoorBlock::new, (Settings.copy(STEEL_DOOR)));

        WAXED_EXPOSED_STEEL_BLOCK = register("waxed_exposed_steel_block", Block::new, (Settings.create().mapColor(MapColor.GRAY).sounds(BlockSoundGroup.NETHERITE).requiresTool().hardness(5.0F).resistance(300.0F)));
        WAXED_EXPOSED_CUT_STEEL = register("waxed_exposed_cut_steel", Block::new, (Settings.copy(STEEL_BLOCK).strength(3.0F, 300.0F)));
        WAXED_EXPOSED_CUT_STEEL_STAIRS = register("waxed_exposed_cut_steel_stairs", settings -> new StairsBlock(EXPOSED_CUT_STEEL.getDefaultState(), settings), Settings.copy(EXPOSED_CUT_STEEL));
        WAXED_EXPOSED_CUT_STEEL_SLAB = register("waxed_exposed_cut_steel_slab", SlabBlock::new, (Settings.copy(EXPOSED_CUT_STEEL)));
        WAXED_EXPOSED_STEEL_GRATE = register("waxed_exposed_steel_grate", GrateBlock::new, (Settings.copy(CUT_STEEL).strength(2.0F, 300.0F).nonOpaque()));
        WAXED_EXPOSED_CHISELED_STEEL = register("waxed_exposed_chiseled_steel", Block::new, (Settings.copy(CUT_STEEL)));
        WAXED_EXPOSED_STEEL_FENCE = register("waxed_exposed_steel_fence", FenceBlock::new, Settings.copy(CUT_STEEL));
        WAXED_EXPOSED_STEEL_DOOR = register("waxed_exposed_steel_door", SteelDoorBlock::new, (Settings.copy(STEEL_BLOCK).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
        WAXED_EXPOSED_STEEL_TRAPDOOR = register("waxed_exposed_steel_trapdoor", SteelTrapdoorBlock::new, (Settings.copy(STEEL_DOOR)));

        WAXED_WEATHERED_STEEL_BLOCK = register("waxed_weathered_steel_block", Block::new, (Settings.create().mapColor(MapColor.GRAY).sounds(BlockSoundGroup.NETHERITE).requiresTool().hardness(5.0F).resistance(300.0F)));
        WAXED_WEATHERED_CUT_STEEL = register("waxed_weathered_cut_steel", Block::new, (Settings.copy(STEEL_BLOCK).strength(3.0F, 300.0F)));
        WAXED_WEATHERED_CUT_STEEL_STAIRS = register("waxed_weathered_cut_steel_stairs", settings -> new StairsBlock(WEATHERED_CUT_STEEL.getDefaultState(), settings), Settings.copy(WEATHERED_CUT_STEEL));
        WAXED_WEATHERED_CUT_STEEL_SLAB = register("waxed_weathered_cut_steel_slab", SlabBlock::new, (Settings.copy(WEATHERED_CUT_STEEL)));
        WAXED_WEATHERED_STEEL_GRATE = register("waxed_weathered_steel_grate", GrateBlock::new, (Settings.copy(CUT_STEEL).strength(2.0F, 300.0F).nonOpaque()));
        WAXED_WEATHERED_CHISELED_STEEL = register("waxed_weathered_chiseled_steel", Block::new, (Settings.copy(CUT_STEEL)));
        WAXED_WEATHERED_STEEL_FENCE = register("waxed_weathered_steel_fence", FenceBlock::new, Settings.copy(CUT_STEEL));
        WAXED_WEATHERED_STEEL_DOOR = register("waxed_weathered_steel_door", SteelDoorBlock::new, (Settings.copy(STEEL_BLOCK).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
        WAXED_WEATHERED_STEEL_TRAPDOOR = register("waxed_weathered_steel_trapdoor", SteelTrapdoorBlock::new, (Settings.copy(STEEL_DOOR)));

        WAXED_OXIDIZED_STEEL_BLOCK = register("waxed_oxidized_steel_block", Block::new, (Settings.create().mapColor(MapColor.GRAY).sounds(BlockSoundGroup.NETHERITE).requiresTool().hardness(5.0F).resistance(300.0F)));
        WAXED_OXIDIZED_CUT_STEEL = register("waxed_oxidized_cut_steel", Block::new, (Settings.copy(STEEL_BLOCK).strength(3.0F, 300.0F)));
        WAXED_OXIDIZED_CUT_STEEL_STAIRS = register("waxed_oxidized_cut_steel_stairs", settings -> new StairsBlock(OXIDIZED_CUT_STEEL.getDefaultState(), settings), Settings.copy(OXIDIZED_CUT_STEEL));
        WAXED_OXIDIZED_CUT_STEEL_SLAB = register("waxed_oxidized_cut_steel_slab", SlabBlock::new, (Settings.copy(OXIDIZED_CUT_STEEL)));
        WAXED_OXIDIZED_STEEL_GRATE = register("waxed_oxidized_steel_grate", GrateBlock::new, (Settings.copy(CUT_STEEL).strength(2.0F, 300.0F).nonOpaque()));
        WAXED_OXIDIZED_CHISELED_STEEL = register("waxed_oxidized_chiseled_steel", Block::new, (Settings.copy(CUT_STEEL)));
        WAXED_OXIDIZED_STEEL_FENCE = register("waxed_oxidized_steel_fence", FenceBlock::new, Settings.copy(CUT_STEEL));
        WAXED_OXIDIZED_STEEL_DOOR = register("waxed_oxidized_steel_door", SteelDoorBlock::new, (Settings.copy(STEEL_BLOCK).nonOpaque().pistonBehavior(PistonBehavior.DESTROY)));
        WAXED_OXIDIZED_STEEL_TRAPDOOR = register("waxed_oxidized_steel_trapdoor", SteelTrapdoorBlock::new, (Settings.copy(STEEL_DOOR)));


        REDSTONE_BRIDGE = register("redstone_bridge", RedstoneBridgeBlock::new, Settings.copy(STEEL_GRATE));
        CAGELIGHT = register("cagelight", ThinPillarBlock::new, Settings.copy(STEEL_GRATE).nonOpaque().emissiveLighting((state, world, pos) -> true).luminance( (state) -> 11 ) );

        HORNFELS = register("hornfels", PillarBlock::new, Settings.copy(Blocks.DEEPSLATE));
        COBBLED_HORNFELS = register("cobbled_hornfels", Block::new  , Settings.copy(Blocks.COBBLED_DEEPSLATE));
        COBBLED_HORNFELS_STAIRS = register("cobbled_hornfels_stairs", (settings) -> new CustomStairsBlock(COBBLED_HORNFELS.getDefaultState(), settings), Settings.copy(Blocks.COBBLED_DEEPSLATE));
        COBBLED_HORNFELS_SLAB = register("cobbled_hornfels_slab", SlabBlock::new, Settings.copy(Blocks.COBBLED_DEEPSLATE));
        COBBLED_HORNFELS_WALL = register("cobbled_hornfels_wall", WallBlock::new, Settings.copy(Blocks.COBBLED_DEEPSLATE));
        POLISHED_HORNFELS = register("polished_hornfels", PillarBlock::new, Settings.copy(Blocks.POLISHED_DEEPSLATE));
        POLISHED_HORNFELS_STAIRS = register("polished_hornfels_stairs", (settings) -> new CustomStairsBlock(POLISHED_HORNFELS.getDefaultState(), settings), Settings.copy(Blocks.POLISHED_DEEPSLATE_STAIRS));
        POLISHED_HORNFELS_SLAB = register("polished_hornfels_slab", SlabBlock::new, Settings.copy(Blocks.POLISHED_DEEPSLATE_SLAB));
        HORNFELS_TILES = register("hornfels_tiles", Block::new, Settings.copy(Blocks.DEEPSLATE_TILES));
        CRACKED_HORNFELS_TILES = register("cracked_hornfels_tiles", Block::new, Settings.copy(Blocks.DEEPSLATE_TILES));
        HORNFELS_TILE_STAIRS = register("hornfels_tile_stairs", (settings) -> new CustomStairsBlock(HORNFELS_TILES.getDefaultState(), settings), Settings.copy(Blocks.DEEPSLATE_TILE_STAIRS));
        HORNFELS_TILE_SLAB = register("hornfels_tile_slab", SlabBlock::new, Settings.copy(Blocks.DEEPSLATE_TILE_SLAB));
        CHISELED_HORNFELS = register("chiseled_hornfels", Block::new, Settings.copy(VABlocks.POLISHED_HORNFELS));
        CHISELED_HORNFELS_TILES = register("chiseled_hornfels_tiles", Block::new, Settings.copy(VABlocks.HORNFELS_TILES));

        BLUESCHIST = register("blueschist", Block::new, Settings.copy(Blocks.DEEPSLATE));
        COBBLED_BLUESCHIST = register("cobbled_blueschist", Block::new, Settings.copy(Blocks.COBBLED_DEEPSLATE));
        COBBLED_BLUESCHIST_STAIRS = register("cobbled_blueschist_stairs", (settings) -> new CustomStairsBlock(VABlocks.COBBLED_BLUESCHIST.getDefaultState(), settings), Settings.copy(Blocks.COBBLED_DEEPSLATE));
        COBBLED_BLUESCHIST_SLAB = register("cobbled_blueschist_slab", SlabBlock::new, Settings.copy(Blocks.COBBLED_DEEPSLATE));
        COBBLED_BLUESCHIST_WALL = register("cobbled_blueschist_wall", WallBlock::new, Settings.copy(Blocks.COBBLED_DEEPSLATE));
        POLISHED_BLUESCHIST = register("polished_blueschist", Block::new, Settings.copy(Blocks.POLISHED_DEEPSLATE));
        POLISHED_BLUESCHIST_STAIRS = register("polished_blueschist_stairs", (settings) -> new CustomStairsBlock(POLISHED_BLUESCHIST.getDefaultState(), settings), Settings.copy(Blocks.POLISHED_DEEPSLATE_STAIRS));
        POLISHED_BLUESCHIST_SLAB = register("polished_blueschist_slab", SlabBlock::new, Settings.copy(Blocks.POLISHED_DEEPSLATE_SLAB));
        BLUESCHIST_BRICKS = register("blueschist_bricks", Block::new, Settings.copy(Blocks.DEEPSLATE_BRICKS));
        CRACKED_BLUESCHIST_BRICKS = register("cracked_blueschist_bricks", Block::new, Settings.copy(Blocks.DEEPSLATE_BRICKS));
        BLUESCHIST_BRICK_STAIRS = register("blueschist_brick_stairs", (settings) -> new CustomStairsBlock(BLUESCHIST_BRICKS.getDefaultState(), settings), Settings.copy(Blocks.DEEPSLATE_BRICK_STAIRS));
        BLUESCHIST_BRICK_SLAB = register("blueschist_brick_slab", SlabBlock::new, Settings.copy(Blocks.DEEPSLATE_BRICK_SLAB));
        BLUESCHIST_BRICK_WALL = register("blueschist_brick_wall", WallBlock::new, Settings.copy(Blocks.DEEPSLATE_BRICK_WALL));
        CHISELED_BLUESCHIST = register("chiseled_blueschist", Block::new, Settings.copy(VABlocks.BLUESCHIST_BRICKS));

        SYENITE = register("syenite", Block::new, Settings.copy(Blocks.DEEPSLATE));
        COBBLED_SYENITE = register("cobbled_syenite", Block::new, Settings.copy(Blocks.COBBLED_DEEPSLATE));
        COBBLED_SYENITE_STAIRS = register("cobbled_syenite_stairs", (settings) -> new CustomStairsBlock(VABlocks.COBBLED_SYENITE.getDefaultState(), settings), Settings.copy(Blocks.COBBLED_DEEPSLATE));
        COBBLED_SYENITE_SLAB = register("cobbled_syenite_slab", SlabBlock::new, Settings.copy(Blocks.COBBLED_DEEPSLATE));
        COBBLED_SYENITE_WALL = register("cobbled_syenite_wall", WallBlock::new, Settings.copy(Blocks.COBBLED_DEEPSLATE));
        POLISHED_SYENITE = register("polished_syenite", Block::new, Settings.copy(Blocks.POLISHED_DEEPSLATE));
        POLISHED_SYENITE_STAIRS = register("polished_syenite_stairs", (settings) -> new CustomStairsBlock(POLISHED_SYENITE.getDefaultState(), settings), Settings.copy(Blocks.POLISHED_DEEPSLATE_STAIRS));
        POLISHED_SYENITE_SLAB = register("polished_syenite_slab", SlabBlock::new, Settings.copy(Blocks.POLISHED_DEEPSLATE_SLAB));
        SYENITE_BRICKS = register("syenite_bricks", Block::new, Settings.copy(Blocks.DEEPSLATE_BRICKS));
        CRACKED_SYENITE_BRICKS = register("cracked_syenite_bricks", Block::new, Settings.copy(Blocks.DEEPSLATE_BRICKS));
        SYENITE_BRICK_STAIRS = register("syenite_brick_stairs", (settings) -> new CustomStairsBlock(VABlocks.SYENITE_BRICKS.getDefaultState(), settings), Settings.copy(Blocks.DEEPSLATE_BRICK_STAIRS));
        SYENITE_BRICK_SLAB = register("syenite_brick_slab", SlabBlock::new, Settings.copy(Blocks.DEEPSLATE_BRICK_SLAB));
        SYENITE_BRICK_WALL = register("syenite_brick_wall", WallBlock::new, Settings.copy(Blocks.DEEPSLATE_BRICK_WALL));
        CHISELED_SYENITE = register("chiseled_syenite", Block::new, Settings.copy(VABlocks.SYENITE_BRICKS));

        ROCK_SALT_BLOCK = register("rock_salt_block", Block::new, Settings.copy(Blocks.CALCITE));
        ROCK_SALT_CRYSTAL = register("rock_salt_crystal", CrystalBlock::new, Settings.copy(Blocks.AMETHYST_CLUSTER).luminance(state -> 0).sounds(BlockSoundGroup.CALCITE).pistonBehavior(PistonBehavior.DESTROY));

        SPOTLIGHT = register("spotlight", SpotlightBlock::new, Settings.copy(STEEL_BLOCK).nonOpaque().luminance((state) -> state.get(SpotlightBlock.POWERED) ? 6 : 0).emissiveLighting((state, world, pos) -> state.get(Properties.POWERED)));
        SPOTLIGHT_LIGHT = register("spotlight_light", SpotlightLightBlock::new, Settings.create().sounds(BlockSoundGroup.INTENTIONALLY_EMPTY).replaceable().noCollision().dropsNothing().luminance((state) -> state.get(SpotlightLightBlock.LIT) ? 15 : 0).pistonBehavior(PistonBehavior.DESTROY));

        COTTON = register("cotton", CottonCropBlock::new, Settings.create().noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP));
        CORN_CROP = register("corn_crop", CornCropBlock::new, Settings.create().noCollision().ticksRandomly().breakInstantly().sounds(BlockSoundGroup.CROP).offset(AbstractBlock.OffsetType.XZ));

        FLOATROCK = register("floatrock", FloatrockBlock::new, Settings.copy(Blocks.TUFF));
        GRASSY_FLOATROCK = register("grassy_floatrock", GrassyFloatrockBlock::new, Settings.copy(Blocks.TUFF).sounds(GRASSY_FLOATROCK_SOUNDGROUP));
        FLOATROCK_STAIRS = register("floatrock_stairs", (settings) -> new StairsBlock(FLOATROCK.getDefaultState(), settings), Settings.copy(Blocks.TUFF));
        FLOATROCK_SLAB = register("floatrock_slab", SlabBlock::new, Settings.copy(Blocks.TUFF));
        FLOATROCK_WALL = register("floatrock_wall", WallBlock::new, Settings.copy(Blocks.TUFF));
        FLOATROCK_BRICKS = register("floatrock_bricks", Block::new, Settings.copy(Blocks.TUFF_BRICKS));
        FLOATROCK_BRICK_STAIRS = register("floatrock_brick_stairs", (settings) -> new StairsBlock(FLOATROCK_BRICKS.getDefaultState(), settings), Settings.copy(Blocks.TUFF_BRICKS));
        FLOATROCK_BRICK_SLAB = register("floatrock_brick_slab", SlabBlock::new, Settings.copy(Blocks.TUFF_BRICKS));
        FLOATROCK_BRICK_WALL = register("floatrock_brick_wall", WallBlock::new, Settings.copy(Blocks.TUFF_BRICKS));
        POLISHED_FLOATROCK = register("polished_floatrock", Block::new, Settings.copy(Blocks.POLISHED_TUFF));
        POLISHED_FLOATROCK_STAIRS = register("polished_floatrock_stairs", (settings) -> new StairsBlock(POLISHED_FLOATROCK.getDefaultState(), settings), Settings.copy(Blocks.POLISHED_TUFF));
        POLISHED_FLOATROCK_SLAB = register("polished_floatrock_slab", SlabBlock::new, Settings.copy(Blocks.POLISHED_TUFF));
        POLISHED_FLOATROCK_WALL = register("polished_floatrock_wall", WallBlock::new, Settings.copy(Blocks.POLISHED_TUFF));

        BALLOON_BULB = register("balloon_bulb", BalloonBulbBlock::new, Settings.copy(COTTON).mapColor(MapColor.LIGHT_BLUE).offset(AbstractBlock.OffsetType.XZ));
        BALLOON_BULB_PLANT = register("balloon_bulb_plant", BalloonBulbPlantBlock::new, Settings.copy(BALLOON_BULB).requires(VirtualAdditions.PREVIEW));
        BALLOON_BULB_BUD = register("balloon_bulb_bud", BalloonBulbBudBlock::new, Settings.copy(BALLOON_BULB).requires(VirtualAdditions.PREVIEW));

        Settings floatrockOreSettings = Settings.create().mapColor(MapColor.TERRACOTTA_BROWN).instrument(NoteBlockInstrument.BASS).requiresTool().strength(2.0F, 1.5F).sounds(BlockSoundGroup.TUFF);

        FLOATROCK_COAL_ORE = register("floatrock_coal_ore", (settings) -> new ExperienceDroppingBlock(UniformIntProvider.create(0, 2), settings), floatrockOreSettings);
        FLOATROCK_IRON_ORE = register("floatrock_iron_ore", (settings) -> new ExperienceDroppingBlock(ConstantIntProvider.create(0), settings), floatrockOreSettings);
        FLOATROCK_COPPER_ORE = register("floatrock_copper_ore", (settings) -> new ExperienceDroppingBlock(ConstantIntProvider.create(0), settings), floatrockOreSettings);
        FLOATROCK_GOLD_ORE = register("floatrock_gold_ore", (settings) -> new ExperienceDroppingBlock(ConstantIntProvider.create(0), settings), floatrockOreSettings);
        FLOATROCK_REDSTONE_ORE = register("floatrock_redstone_ore", RedstoneOreBlock::new, floatrockOreSettings);
        FLOATROCK_EMERALD_ORE = register("floatrock_emerald_ore", (settings) -> new ExperienceDroppingBlock(UniformIntProvider.create(3, 7), settings), floatrockOreSettings);
        FLOATROCK_LAPIS_ORE = register("floatrock_lapis_ore", (settings) -> new ExperienceDroppingBlock(UniformIntProvider.create(2, 5), settings), floatrockOreSettings);
        FLOATROCK_DIAMOND_ORE = register("floatrock_diamond_ore", (settings) -> new ExperienceDroppingBlock(UniformIntProvider.create(3, 7), settings), floatrockOreSettings);

        SPRINGSOIL = register("springsoil", SpringSoilBlock::new, Settings.copy(Blocks.ROOTED_DIRT).requires(VirtualAdditions.PREVIEW));

        AEROBLOOM_LOG = register("aerobloom_log", PillarBlock::new, Settings.copy(Blocks.CHERRY_LOG));
        AEROBLOOM_WOOD = register("aerobloom_wood", PillarBlock::new, Settings.copy(Blocks.CHERRY_WOOD));
        STRIPPED_AEROBLOOM_LOG = register("stripped_aerobloom_log", PillarBlock::new, Settings.copy(Blocks.STRIPPED_CHERRY_LOG));
        STRIPPED_AEROBLOOM_WOOD = register("stripped_aerobloom_wood", PillarBlock::new, Settings.copy(Blocks.STRIPPED_CHERRY_WOOD));
        AEROBLOOM_PLANKS = register("aerobloom_planks", Block::new, Settings.copy(Blocks.CHERRY_PLANKS));
        AEROBLOOM_STAIRS = register("aerobloom_stairs", (settings) -> new StairsBlock(AEROBLOOM_PLANKS.getDefaultState(), settings), Settings.copy(Blocks.CHERRY_STAIRS));
        AEROBLOOM_SLAB = register("aerobloom_slab", SlabBlock::new, Settings.copy(Blocks.CHERRY_SLAB));
        AEROBLOOM_FENCE = register("aerobloom_fence", FenceBlock::new, Settings.copy(Blocks.CHERRY_SLAB));
        AEROBLOOM_FENCE_GATE = register("aerobloom_fence_gate", (settings) -> new FenceGateBlock(AEROBLOOM_WOODTYPE, settings), Settings.copy(Blocks.CHERRY_SLAB));
        AEROBLOOM_DOOR = register("aerobloom_door", (settings) -> new DoorBlock( AEROBLOOM, settings), Settings.copy(Blocks.CHERRY_DOOR));
        AEROBLOOM_TRAPDOOR = register("aerobloom_trapdoor", (settings) -> new TrapdoorBlock( AEROBLOOM, settings), Settings.copy(Blocks.CHERRY_DOOR));
        AEROBLOOM_PRESSURE_PLATE = register("aerobloom_pressure_plate", (settings) -> new PressurePlateBlock(AEROBLOOM, settings), Settings.copy(Blocks.CHERRY_BUTTON));
        AEROBLOOM_BUTTON = register("aerobloom_button", (settings) -> new ButtonBlock(AEROBLOOM, 30, settings), Settings.copy(Blocks.CHERRY_BUTTON));
        AEROBLOOM_SIGN = register("aerobloom_sign", (settings) -> new CustomSignBlocks.CustomSignBlock(settings, AEROBLOOM_WOODTYPE), Settings.copy(Blocks.CHERRY_SIGN));
        AEROBLOOM_WALL_SIGN = register("aerobloom_wall_sign", (settings) -> new CustomSignBlocks.CustomWallSignBlock(settings, AEROBLOOM_WOODTYPE), Settings.copy(AEROBLOOM_SIGN).lootTable(AEROBLOOM_SIGN.getLootTableKey()));
        AEROBLOOM_HANGING_SIGN = register("aerobloom_hanging_sign", (settings) -> new CustomSignBlocks.CustomHangingSignBlock(settings, AEROBLOOM_WOODTYPE), Settings.copy(Blocks.CHERRY_HANGING_SIGN));
        AEROBLOOM_WALL_HANGING_SIGN = register("aerobloom_wall_hanging_sign", (settings) -> new CustomSignBlocks.CustomWallHangingSignBlock(settings, AEROBLOOM_WOODTYPE), Settings.copy(Blocks.CHERRY_WALL_HANGING_SIGN).lootTable(AEROBLOOM_HANGING_SIGN.getLootTableKey()));
        AEROBLOOM_LEAVES = register("aerobloom_leaves", LeavesBlock::new, Settings.copy(Blocks.CHERRY_LEAVES));
        AEROBLOOM_SAPLING = register("aerobloom_sapling", (settings) -> new SaplingBlock(CustomSaplingGenerator.AEROBLOOM, settings), Settings.copy(Blocks.CHERRY_SAPLING));
        POTTED_AEROBLOOM_SAPLING = register("potted_aerobloom", (settings) -> new FlowerPotBlock(AEROBLOOM_SAPLING, settings), Settings.copy(Blocks.FLOWER_POT));

        OAK_HEDGE = register("oak_hedge", HedgeBlock::new, Settings.copy(Blocks.OAK_LEAVES));
        SPRUCE_HEDGE = register("spruce_hedge", HedgeBlock::new, Settings.copy(Blocks.SPRUCE_LEAVES));
        BIRCH_HEDGE = register("birch_hedge", HedgeBlock::new, Settings.copy(Blocks.BIRCH_LEAVES));
        JUNGLE_HEDGE = register("jungle_hedge", HedgeBlock::new, Settings.copy(Blocks.JUNGLE_LEAVES));
        ACACIA_HEDGE = register("acacia_hedge", HedgeBlock::new, Settings.copy(Blocks.ACACIA_LEAVES));
        DARK_OAK_HEDGE = register("dark_oak_hedge", HedgeBlock::new, Settings.copy(Blocks.DARK_OAK_LEAVES));
        PALE_OAK_HEDGE = register("pale_oak_hedge", HedgeBlock::new, Settings.copy(Blocks.PALE_OAK_LEAVES));
        MANGROVE_HEDGE = register("mangrove_hedge", HedgeBlock::new, Settings.copy(Blocks.MANGROVE_LEAVES));
        CHERRY_HEDGE = register("cherry_hedge", HedgeBlock::new, Settings.copy(Blocks.CHERRY_LEAVES));
        AEROBLOOM_HEDGE = register("aerobloom_hedge", HedgeBlock::new, Settings.copy(VABlocks.AEROBLOOM_LEAVES));
        AZALEA_HEDGE = register("azalea_hedge", HedgeBlock::new, Settings.copy(Blocks.AZALEA_LEAVES));
        FLOWERING_AZALEA_HEDGE = register("flowering_azalea_hedge", HedgeBlock::new, Settings.copy(Blocks.FLOWERING_AZALEA_LEAVES));

        GLOWING_SILK = register("glowing_silk", HangingBlock::new, Settings.create().mapColor(MapColor.LIGHT_BLUE).sounds(BlockSoundGroup.WART_BLOCK).luminance((state) -> 6).noCollision().nonOpaque().breakInstantly().offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY));
        FRAYED_SILK = register("frayed_silk", FrayedSilkBlock::new, Settings.create().mapColor(MapColor.DARK_AQUA).sounds(BlockSoundGroup.WART_BLOCK).noCollision().nonOpaque().breakInstantly().replaceable().offset(AbstractBlock.OffsetType.XZ).burnable().pistonBehavior(PistonBehavior.DESTROY));
        LUMWASP_NEST = register("lumwasp_nest", LumwaspNestBlock::new, Settings.copy(Blocks.HONEYCOMB_BLOCK).sounds(BlockSoundGroup.WART_BLOCK).mapColor(MapColor.DARK_AQUA).burnable());
        SILK_BLOCK = register("silk_block", SilkBlock::new, Settings.copy(Blocks.HONEYCOMB_BLOCK).sounds(BlockSoundGroup.WART_BLOCK).mapColor(MapColor.DARK_AQUA).burnable());
        GREENCAP_MUSHROOM = register("greencap_mushroom", GreencapMushroomBlock::new, Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.NETHER_SPROUTS).offset(AbstractBlock.OffsetType.XZ).luminance((state) -> 2).pistonBehavior(PistonBehavior.DESTROY));
        TALL_GREENCAP_MUSHROOMS = register("tall_greencap_mushrooms", TallGreencapMushroomBlock::new, Settings.create().mapColor(MapColor.DARK_GREEN).noCollision().breakInstantly().sounds(BlockSoundGroup.NETHER_SPROUTS).offset(AbstractBlock.OffsetType.XZ).luminance((state) -> 5).pistonBehavior(PistonBehavior.DESTROY));
        POTTED_GREENCAP_MUSHROOM = register("potted_greencap_mushroom", (settings) -> new FlowerPotBlock(GREENCAP_MUSHROOM, settings), Settings.copy(Blocks.FLOWER_POT));
        WEBBED_SILK = register("webbed_silk", SilkFluffBlock::new, Settings.create().strength(0.25F).sounds(BlockSoundGroup.POWDER_SNOW).mapColor(MapColor.DARK_AQUA).nonOpaque().solidBlock((state, world, pos) -> false).suffocates(((state, world, pos) -> false)).blockVision((state, world, pos) -> false).burnable().allowsSpawning((state, world, pos, type) -> type == VAEntityType.LUMWASP));
        SILKBULB = register("silkbulb", Block::new, Settings.copy(Blocks.SHROOMLIGHT).mapColor(MapColor.DARK_AQUA).luminance( (state) -> 15 ).burnable());
        WHITE_SILKBULB = register("white_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.WHITE));
        LIGHT_GRAY_SILKBULB = register("light_gray_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.LIGHT_GRAY));
        GRAY_SILKBULB = register("gray_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.GRAY));
        BLACK_SILKBULB = register("black_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.BLACK));
        BROWN_SILKBULB = register("brown_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.BROWN));
        RED_SILKBULB = register("red_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.RED));
        ORANGE_SILKBULB = register("orange_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.ORANGE));
        YELLOW_SILKBULB = register("yellow_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.YELLOW));
        LIME_SILKBULB = register("lime_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.LIME));
        GREEN_SILKBULB = register("green_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.GREEN));
        CYAN_SILKBULB = register("cyan_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.CYAN));
        LIGHT_BLUE_SILKBULB = register("light_blue_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.LIGHT_BLUE));
        BLUE_SILKBULB = register("blue_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.BLUE));
        PURPLE_SILKBULB = register("purple_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.PURPLE));
        MAGENTA_SILKBULB = register("magenta_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.MAGENTA));
        PINK_SILKBULB = register("pink_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.PINK));

        CHARTREUSE_WOOL = register("chartreuse_wool", Block::new, Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME));
        CHARTREUSE_CARPET = register("chartreuse_carpet", (settings) -> new DyedCarpetBlock(VADyeColors.CHARTREUSE,  settings), Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME));
        CHARTREUSE_TERRACOTTA = register("chartreuse_terracotta", Block::new, Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME));
        CHARTREUSE_CONCRETE = register("chartreuse_concrete", Block::new, Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME));
        CHARTREUSE_CONCRETE_POWDER = register("chartreuse_concrete_powder", (settings) -> new ConcretePowderBlock(CHARTREUSE_CONCRETE, settings), Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME));
        CHARTREUSE_STAINED_GLASS = register("chartreuse_stained_glass", (settings) -> new StainedGlassBlock(VADyeColors.CHARTREUSE, settings), Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME));
        CHARTREUSE_STAINED_GLASS_PANE = register("chartreuse_stained_glass_pane", (settings) -> new StainedGlassPaneBlock(VADyeColors.CHARTREUSE, settings), Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME));
        CHARTREUSE_SILKBULB = register("chartreuse_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.LIME));
        CHARTREUSE_CANDLE = register("chartreuse_candle", CandleBlock::new, Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME));
        CHARTREUSE_CANDLE_CAKE = register("chartreuse_candle_cake", (settings) -> new CandleCakeBlock(CHARTREUSE_CANDLE, settings), Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME));
        CHARTREUSE_BED = register("chartreuse_bed", (settings) -> new CustomBedBlock(VADyeColors.CHARTREUSE, settings), Settings.copy(Blocks.WHITE_BED));
        CHARTREUSE_SHULKER_BOX = register("chartreuse_shulker_box", (settings) -> new CustomShulkerBoxBlock(VADyeColors.CHARTREUSE, settings), Settings.copy(Blocks.SHULKER_BOX));
        CHARTREUSE_BANNER = register("chartreuse_banner", (settings) -> new CustomBannerBlock(VADyeColors.CHARTREUSE, settings), Settings.copy(Blocks.WHITE_BANNER));
        CHARTREUSE_WALL_BANNER = register("chartreuse_wall_banner", (settings) -> new CustomWallBannerBlock(VADyeColors.CHARTREUSE, settings), Settings.copy(Blocks.WHITE_WALL_BANNER).lootTable(CHARTREUSE_BANNER.getLootTableKey()));
        CHARTREUSE_GLAZED_TERRACOTTA = register("chartreuse_glazed_terracotta", GlazedTerracottaBlock::new, Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.CHARTREUSE));
        
        MAROON_WOOL = register("maroon_wool", Block::new, Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME));
        MAROON_CARPET = register("maroon_carpet", (settings) -> new DyedCarpetBlock(VADyeColors.MAROON,  settings), Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME));
        MAROON_TERRACOTTA = register("maroon_terracotta", Block::new, Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME));
        MAROON_CONCRETE = register("maroon_concrete", Block::new, Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME));
        MAROON_CONCRETE_POWDER = register("maroon_concrete_powder", (settings) -> new ConcretePowderBlock(MAROON_CONCRETE, settings), Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME));
        MAROON_STAINED_GLASS = register("maroon_stained_glass", (settings) -> new StainedGlassBlock(VADyeColors.MAROON, settings), Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME));
        MAROON_STAINED_GLASS_PANE = register("maroon_stained_glass_pane", (settings) -> new StainedGlassPaneBlock(VADyeColors.MAROON, settings), Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME));
        MAROON_SILKBULB = register("maroon_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.LIME));
        MAROON_CANDLE = register("maroon_candle", CandleBlock::new, Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME));
        MAROON_CANDLE_CAKE = register("maroon_candle_cake", (settings) -> new CandleCakeBlock(MAROON_CANDLE, settings), Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME));
        MAROON_BED = register("maroon_bed", (settings) -> new CustomBedBlock(VADyeColors.MAROON, settings), Settings.copy(Blocks.WHITE_BED));
        MAROON_SHULKER_BOX = register("maroon_shulker_box", (settings) -> new CustomShulkerBoxBlock(VADyeColors.MAROON, settings), Settings.copy(Blocks.SHULKER_BOX));
        MAROON_BANNER = register("maroon_banner", (settings) -> new CustomBannerBlock(VADyeColors.MAROON, settings), Settings.copy(Blocks.WHITE_BANNER));
        MAROON_WALL_BANNER = register("maroon_wall_banner", (settings) -> new CustomWallBannerBlock(VADyeColors.MAROON, settings), Settings.copy(Blocks.WHITE_WALL_BANNER).lootTable(MAROON_BANNER.getLootTableKey()));
        MAROON_GLAZED_TERRACOTTA = register("maroon_glazed_terracotta", GlazedTerracottaBlock::new, Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.MAROON));

        INDIGO_WOOL = register("indigo_wool", Block::new, Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME));
        INDIGO_CARPET = register("indigo_carpet", (settings) -> new DyedCarpetBlock(VADyeColors.INDIGO,  settings), Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME));
        INDIGO_TERRACOTTA = register("indigo_terracotta", Block::new, Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME));
        INDIGO_CONCRETE = register("indigo_concrete", Block::new, Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME));
        INDIGO_CONCRETE_POWDER = register("indigo_concrete_powder", (settings) -> new ConcretePowderBlock(INDIGO_CONCRETE, settings), Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME));
        INDIGO_STAINED_GLASS = register("indigo_stained_glass", (settings) -> new StainedGlassBlock(VADyeColors.INDIGO, settings), Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME));
        INDIGO_STAINED_GLASS_PANE = register("indigo_stained_glass_pane", (settings) -> new StainedGlassPaneBlock(VADyeColors.INDIGO, settings), Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME));
        INDIGO_SILKBULB = register("indigo_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.LIME));
        INDIGO_CANDLE = register("indigo_candle", CandleBlock::new, Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME));
        INDIGO_CANDLE_CAKE = register("indigo_candle_cake", (settings) -> new CandleCakeBlock(INDIGO_CANDLE, settings), Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME));
        INDIGO_BED = register("indigo_bed", (settings) -> new CustomBedBlock(VADyeColors.INDIGO, settings), Settings.copy(Blocks.WHITE_BED));
        INDIGO_SHULKER_BOX = register("indigo_shulker_box", (settings) -> new CustomShulkerBoxBlock(VADyeColors.INDIGO, settings), Settings.copy(Blocks.SHULKER_BOX));
        INDIGO_BANNER = register("indigo_banner", (settings) -> new CustomBannerBlock(VADyeColors.INDIGO, settings), Settings.copy(Blocks.WHITE_BANNER));
        INDIGO_WALL_BANNER = register("indigo_wall_banner", (settings) -> new CustomWallBannerBlock(VADyeColors.INDIGO, settings), Settings.copy(Blocks.WHITE_WALL_BANNER).lootTable(INDIGO_BANNER.getLootTableKey()));
        INDIGO_GLAZED_TERRACOTTA = register("indigo_glazed_terracotta", GlazedTerracottaBlock::new, Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.INDIGO));

        PLUM_WOOL = register("plum_wool", Block::new, Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME));
        PLUM_CARPET = register("plum_carpet", (settings) -> new DyedCarpetBlock(VADyeColors.PLUM,  settings), Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME));
        PLUM_TERRACOTTA = register("plum_terracotta", Block::new, Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME));
        PLUM_CONCRETE = register("plum_concrete", Block::new, Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME));
        PLUM_CONCRETE_POWDER = register("plum_concrete_powder", (settings) -> new ConcretePowderBlock(PLUM_CONCRETE, settings), Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME));
        PLUM_STAINED_GLASS = register("plum_stained_glass", (settings) -> new StainedGlassBlock(VADyeColors.PLUM, settings), Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME));
        PLUM_STAINED_GLASS_PANE = register("plum_stained_glass_pane", (settings) -> new StainedGlassPaneBlock(VADyeColors.PLUM, settings), Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME));
        PLUM_SILKBULB = register("plum_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.LIME));
        PLUM_CANDLE = register("plum_candle", CandleBlock::new, Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME));
        PLUM_CANDLE_CAKE = register("plum_candle_cake", (settings) -> new CandleCakeBlock(PLUM_CANDLE, settings), Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME));
        PLUM_BED = register("plum_bed", (settings) -> new CustomBedBlock(VADyeColors.PLUM, settings), Settings.copy(Blocks.WHITE_BED));
        PLUM_SHULKER_BOX = register("plum_shulker_box", (settings) -> new CustomShulkerBoxBlock(VADyeColors.PLUM, settings), Settings.copy(Blocks.SHULKER_BOX));
        PLUM_BANNER = register("plum_banner", (settings) -> new CustomBannerBlock(VADyeColors.PLUM, settings), Settings.copy(Blocks.WHITE_BANNER));
        PLUM_WALL_BANNER = register("plum_wall_banner", (settings) -> new CustomWallBannerBlock(VADyeColors.PLUM, settings), Settings.copy(Blocks.WHITE_WALL_BANNER).lootTable(PLUM_BANNER.getLootTableKey()));
        PLUM_GLAZED_TERRACOTTA = register("plum_glazed_terracotta", GlazedTerracottaBlock::new, Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.PLUM));

        VIRIDIAN_WOOL = register("viridian_wool", Block::new, Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME));
        VIRIDIAN_CARPET = register("viridian_carpet", (settings) -> new DyedCarpetBlock(VADyeColors.VIRIDIAN,  settings), Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME));
        VIRIDIAN_TERRACOTTA = register("viridian_terracotta", Block::new, Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME));
        VIRIDIAN_CONCRETE = register("viridian_concrete", Block::new, Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME));
        VIRIDIAN_CONCRETE_POWDER = register("viridian_concrete_powder", (settings) -> new ConcretePowderBlock(VIRIDIAN_CONCRETE, settings), Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME));
        VIRIDIAN_STAINED_GLASS = register("viridian_stained_glass", (settings) -> new StainedGlassBlock(VADyeColors.VIRIDIAN, settings), Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME));
        VIRIDIAN_STAINED_GLASS_PANE = register("viridian_stained_glass_pane", (settings) -> new StainedGlassPaneBlock(VADyeColors.VIRIDIAN, settings), Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME));
        VIRIDIAN_SILKBULB = register("viridian_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.LIME));
        VIRIDIAN_CANDLE = register("viridian_candle", CandleBlock::new, Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME));
        VIRIDIAN_CANDLE_CAKE = register("viridian_candle_cake", (settings) -> new CandleCakeBlock(VIRIDIAN_CANDLE, settings), Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME));
        VIRIDIAN_BED = register("viridian_bed", (settings) -> new CustomBedBlock(VADyeColors.VIRIDIAN, settings), Settings.copy(Blocks.WHITE_BED));
        VIRIDIAN_SHULKER_BOX = register("viridian_shulker_box", (settings) -> new CustomShulkerBoxBlock(VADyeColors.VIRIDIAN, settings), Settings.copy(Blocks.SHULKER_BOX));
        VIRIDIAN_BANNER = register("viridian_banner", (settings) -> new CustomBannerBlock(VADyeColors.VIRIDIAN, settings), Settings.copy(Blocks.WHITE_BANNER));
        VIRIDIAN_WALL_BANNER = register("viridian_wall_banner", (settings) -> new CustomWallBannerBlock(VADyeColors.VIRIDIAN, settings), Settings.copy(Blocks.WHITE_WALL_BANNER).lootTable(VIRIDIAN_BANNER.getLootTableKey()));
        VIRIDIAN_GLAZED_TERRACOTTA = register("viridian_glazed_terracotta", GlazedTerracottaBlock::new, Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.VIRIDIAN));

        TAN_WOOL = register("tan_wool", Block::new, Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME));
        TAN_CARPET = register("tan_carpet", (settings) -> new DyedCarpetBlock(VADyeColors.TAN,  settings), Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME));
        TAN_TERRACOTTA = register("tan_terracotta", Block::new, Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME));
        TAN_CONCRETE = register("tan_concrete", Block::new, Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME));
        TAN_CONCRETE_POWDER = register("tan_concrete_powder", (settings) -> new ConcretePowderBlock(TAN_CONCRETE, settings), Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME));
        TAN_STAINED_GLASS = register("tan_stained_glass", (settings) -> new StainedGlassBlock(VADyeColors.TAN, settings), Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME));
        TAN_STAINED_GLASS_PANE = register("tan_stained_glass_pane", (settings) -> new StainedGlassPaneBlock(VADyeColors.TAN, settings), Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME));
        TAN_SILKBULB = register("tan_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.LIME));
        TAN_CANDLE = register("tan_candle", CandleBlock::new, Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME));
        TAN_CANDLE_CAKE = register("tan_candle_cake", (settings) -> new CandleCakeBlock(TAN_CANDLE, settings), Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME));
        TAN_BED = register("tan_bed", (settings) -> new CustomBedBlock(VADyeColors.TAN, settings), Settings.copy(Blocks.WHITE_BED));
        TAN_SHULKER_BOX = register("tan_shulker_box", (settings) -> new CustomShulkerBoxBlock(VADyeColors.TAN, settings), Settings.copy(Blocks.SHULKER_BOX));
        TAN_BANNER = register("tan_banner", (settings) -> new CustomBannerBlock(VADyeColors.TAN, settings), Settings.copy(Blocks.WHITE_BANNER));
        TAN_WALL_BANNER = register("tan_wall_banner", (settings) -> new CustomWallBannerBlock(VADyeColors.TAN, settings), Settings.copy(Blocks.WHITE_WALL_BANNER).lootTable(TAN_BANNER.getLootTableKey()));
        TAN_GLAZED_TERRACOTTA = register("tan_glazed_terracotta", GlazedTerracottaBlock::new, Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.TAN));

        SINOPIA_WOOL = register("sinopia_wool", Block::new, Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME));
        SINOPIA_CARPET = register("sinopia_carpet", (settings) -> new DyedCarpetBlock(VADyeColors.SINOPIA,  settings), Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME));
        SINOPIA_TERRACOTTA = register("sinopia_terracotta", Block::new, Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME));
        SINOPIA_CONCRETE = register("sinopia_concrete", Block::new, Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME));
        SINOPIA_CONCRETE_POWDER = register("sinopia_concrete_powder", (settings) -> new ConcretePowderBlock(SINOPIA_CONCRETE, settings), Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME));
        SINOPIA_STAINED_GLASS = register("sinopia_stained_glass", (settings) -> new StainedGlassBlock(VADyeColors.SINOPIA, settings), Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME));
        SINOPIA_STAINED_GLASS_PANE = register("sinopia_stained_glass_pane", (settings) -> new StainedGlassPaneBlock(VADyeColors.SINOPIA, settings), Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME));
        SINOPIA_SILKBULB = register("sinopia_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.LIME));
        SINOPIA_CANDLE = register("sinopia_candle", CandleBlock::new, Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME));
        SINOPIA_CANDLE_CAKE = register("sinopia_candle_cake", (settings) -> new CandleCakeBlock(SINOPIA_CANDLE, settings), Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME));
        SINOPIA_BED = register("sinopia_bed", (settings) -> new CustomBedBlock(VADyeColors.SINOPIA, settings), Settings.copy(Blocks.WHITE_BED));
        SINOPIA_SHULKER_BOX = register("sinopia_shulker_box", (settings) -> new CustomShulkerBoxBlock(VADyeColors.SINOPIA, settings), Settings.copy(Blocks.SHULKER_BOX));
        SINOPIA_BANNER = register("sinopia_banner", (settings) -> new CustomBannerBlock(VADyeColors.SINOPIA, settings), Settings.copy(Blocks.WHITE_BANNER));
        SINOPIA_WALL_BANNER = register("sinopia_wall_banner", (settings) -> new CustomWallBannerBlock(VADyeColors.SINOPIA, settings), Settings.copy(Blocks.WHITE_WALL_BANNER).lootTable(SINOPIA_BANNER.getLootTableKey()));
        SINOPIA_GLAZED_TERRACOTTA = register("sinopia_glazed_terracotta", GlazedTerracottaBlock::new, Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.SINOPIA));

        LILAC_WOOL = register("lilac_wool", Block::new, Settings.copy(Blocks.WHITE_WOOL).mapColor(MapColor.LIME));
        LILAC_CARPET = register("lilac_carpet", (settings) -> new DyedCarpetBlock(VADyeColors.LILAC,  settings), Settings.copy(Blocks.WHITE_CARPET).mapColor(MapColor.LIME));
        LILAC_TERRACOTTA = register("lilac_terracotta", Block::new, Settings.copy(Blocks.WHITE_TERRACOTTA).mapColor(MapColor.LIME));
        LILAC_CONCRETE = register("lilac_concrete", Block::new, Settings.copy(Blocks.WHITE_CONCRETE).mapColor(MapColor.LIME));
        LILAC_CONCRETE_POWDER = register("lilac_concrete_powder", (settings) -> new ConcretePowderBlock(LILAC_CONCRETE, settings), Settings.copy(Blocks.WHITE_CONCRETE_POWDER).mapColor(MapColor.LIME));
        LILAC_STAINED_GLASS = register("lilac_stained_glass", (settings) -> new StainedGlassBlock(VADyeColors.LILAC, settings), Settings.copy(Blocks.GLASS).mapColor(MapColor.LIME));
        LILAC_STAINED_GLASS_PANE = register("lilac_stained_glass_pane", (settings) -> new StainedGlassPaneBlock(VADyeColors.LILAC, settings), Settings.copy(Blocks.GLASS_PANE).mapColor(MapColor.LIME));
        LILAC_SILKBULB = register("lilac_silkbulb", Block::new, Settings.copy(SILKBULB).mapColor(MapColor.LIME));
        LILAC_CANDLE = register("lilac_candle", CandleBlock::new, Settings.copy(Blocks.CANDLE).mapColor(MapColor.LIME));
        LILAC_CANDLE_CAKE = register("lilac_candle_cake", (settings) -> new CandleCakeBlock(LILAC_CANDLE, settings), Settings.copy(Blocks.CANDLE_CAKE).mapColor(MapColor.LIME));
        LILAC_BED = register("lilac_bed", (settings) -> new CustomBedBlock(VADyeColors.LILAC, settings), Settings.copy(Blocks.WHITE_BED));
        LILAC_SHULKER_BOX = register("lilac_shulker_box", (settings) -> new CustomShulkerBoxBlock(VADyeColors.LILAC, settings), Settings.copy(Blocks.SHULKER_BOX));
        LILAC_BANNER = register("lilac_banner", (settings) -> new CustomBannerBlock(VADyeColors.LILAC, settings), Settings.copy(Blocks.WHITE_BANNER));
        LILAC_WALL_BANNER = register("lilac_wall_banner", (settings) -> new CustomWallBannerBlock(VADyeColors.LILAC, settings), Settings.copy(Blocks.WHITE_WALL_BANNER).lootTable(LILAC_BANNER.getLootTableKey()));
        LILAC_GLAZED_TERRACOTTA = register("lilac_glazed_terracotta", GlazedTerracottaBlock::new, Settings.copy(Blocks.WHITE_GLAZED_TERRACOTTA).mapColor(VADyeColors.LILAC));

        COLORING_STATION = register("coloring_station", ColoringStationBlock::new, Settings.copy(Blocks.SMITHING_TABLE));

        ACID = register("acid", (settings) -> new AcidFluidBlock(VAFluids.ACID, settings), Settings.create().mapColor(MapColor.LIME).luminance(((state) -> 6)).sounds(BlockSoundGroup.INTENTIONALLY_EMPTY).replaceable().noCollision().strength(100.0F).dropsNothing().allowsSpawning(((state, world, pos, type) -> type == VAEntityType.LUMWASP)).pistonBehavior(PistonBehavior.DESTROY));
        ACID_BLOCK = register("acid_block", AcidBlock::new, Settings.create().mapColor(MapColor.LIME).breakInstantly().sounds(BlockSoundGroup.HONEY).nonOpaque().solidBlock((state, world, pos) -> false));

        IOLITE_ORE = register("iolite_ore", (settings) -> new ExperienceDroppingBlock(UniformIntProvider.create(5, 9), settings), Settings.copy(Blocks.END_STONE).strength(4.5F, 4.5F).requiresTool());
        IOLITE_BLOCK = register("iolite_block", Block::new, Settings.create().mapColor(MapColor.MAGENTA).sounds(BlockSoundGroup.METAL).requiresTool().hardness(5.0F).resistance(300.0F));
        WARP_ANCHOR = register("warp_anchor", WarpAnchorBlock::new, Settings.create().nonOpaque().sounds(BlockSoundGroup.NETHERITE).luminance(state -> 3).emissiveLighting( (state, world, pos) -> !state.get(WarpAnchorBlock.POWERED) ).hardness(22.5F).requiresTool().resistance(600.0F));
        WARP_TETHER = register("warp_tether", WarpTetherBlock::new, Settings.create().nonOpaque().sounds(BlockSoundGroup.NETHERITE).luminance(state -> 3).emissiveLighting( (state, world, pos) -> !state.get(WarpTetherBlock.COOLDOWN) ).hardness(22.5F).requiresTool().resistance(600.0F));
        ENTANGLEMENT_DRIVE = register("entanglement_drive", EntanglementDriveBlock::new, Settings.create().nonOpaque().sounds(BlockSoundGroup.NETHERITE).luminance(state -> 3).emissiveLighting( (state, world, pos) -> !state.get(Properties.POWERED) ).hardness(22.5F).requiresTool().resistance(600.0F));
        REMOTE_NOTIFIER = register("remote_notifier", RemoteNotifierBlock::new, Settings.create().nonOpaque().sounds(BlockSoundGroup.NETHERITE).hardness(22.5F).requiresTool().resistance(600.0F).requires(VirtualAdditions.PREVIEW));

        DESTRUCTIVE_SCULK = register("destructive_sculk", DestructiveSculkBlock::new, Settings.copy(Blocks.SCULK));
        WIND = register("wind", WindBlock::new, Settings.copy(Blocks.AIR));

        setBlocksInitialized();
    }

    public static void init(){
        LandPathNodeTypesRegistry.register(ACID, PathNodeType.LAVA, PathNodeType.DANGER_FIRE);

        FireBlock fire = (FireBlock) Blocks.FIRE;
        fire.registerFlammableBlock(CLIMBING_ROPE_ANCHOR, 5, 20);
        fire.registerFlammableBlock(CLIMBING_ROPE, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_LOG, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_WOOD, 5, 20);
        fire.registerFlammableBlock(STRIPPED_AEROBLOOM_LOG, 5, 20);
        fire.registerFlammableBlock(STRIPPED_AEROBLOOM_WOOD, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_PLANKS, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_STAIRS, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_SLAB, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_FENCE, 5, 20);
        fire.registerFlammableBlock(AEROBLOOM_LEAVES, 30, 60);
        fire.registerFlammableBlock(AEROBLOOM_HEDGE, 30, 60);
        fire.registerFlammableBlock(OAK_HEDGE, 30, 60);
        fire.registerFlammableBlock(SPRUCE_HEDGE, 30, 60);
        fire.registerFlammableBlock(BIRCH_HEDGE, 30, 60);
        fire.registerFlammableBlock(JUNGLE_HEDGE, 30, 60);
        fire.registerFlammableBlock(ACACIA_HEDGE, 30, 60);
        fire.registerFlammableBlock(DARK_OAK_HEDGE, 30, 60);
        fire.registerFlammableBlock(PALE_OAK_HEDGE, 30, 60);
        fire.registerFlammableBlock(MANGROVE_HEDGE, 30, 60);
        fire.registerFlammableBlock(CHERRY_HEDGE, 30, 60);
        fire.registerFlammableBlock(AZALEA_HEDGE, 30, 60);
        fire.registerFlammableBlock(FLOWERING_AZALEA_HEDGE, 30, 60);
        fire.registerFlammableBlock(GLOWING_SILK, 30, 60);
        fire.registerFlammableBlock(FRAYED_SILK, 30, 60);
        fire.registerFlammableBlock(LUMWASP_NEST, 5, 20);
        fire.registerFlammableBlock(SILK_BLOCK, 5, 20);
        fire.registerFlammableBlock(WEBBED_SILK, 30, 60);
        fire.registerFlammableBlock(SILKBULB, 5, 20);
        fire.registerFlammableBlock(WHITE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(LIGHT_GRAY_SILKBULB, 5, 20);
        fire.registerFlammableBlock(GRAY_SILKBULB, 5, 20);
        fire.registerFlammableBlock(BLACK_SILKBULB, 5, 20);
        fire.registerFlammableBlock(BROWN_SILKBULB, 5, 20);
        fire.registerFlammableBlock(RED_SILKBULB, 5, 20);
        fire.registerFlammableBlock(ORANGE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(YELLOW_SILKBULB, 5, 20);
        fire.registerFlammableBlock(LIME_SILKBULB, 5, 20);
        fire.registerFlammableBlock(GREEN_SILKBULB, 5, 20);
        fire.registerFlammableBlock(CYAN_SILKBULB, 5, 20);
        fire.registerFlammableBlock(LIGHT_BLUE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(BLUE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(PURPLE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(MAGENTA_SILKBULB, 5, 20);
        fire.registerFlammableBlock(PINK_SILKBULB, 5, 20);
        fire.registerFlammableBlock(CHARTREUSE_WOOL, 30, 60);
        fire.registerFlammableBlock(CHARTREUSE_CARPET, 60, 20);
        fire.registerFlammableBlock(CHARTREUSE_SILKBULB, 5, 20);
        fire.registerFlammableBlock(MAROON_WOOL, 30, 60);
        fire.registerFlammableBlock(MAROON_CARPET, 60, 20);
        fire.registerFlammableBlock(MAROON_SILKBULB, 5, 20);
        fire.registerFlammableBlock(INDIGO_WOOL, 30, 60);
        fire.registerFlammableBlock(INDIGO_CARPET, 60, 20);
        fire.registerFlammableBlock(INDIGO_SILKBULB, 5, 20);
        fire.registerFlammableBlock(PLUM_WOOL, 30, 60);
        fire.registerFlammableBlock(PLUM_CARPET, 60, 20);
        fire.registerFlammableBlock(PLUM_SILKBULB, 5, 20);
        fire.registerFlammableBlock(VIRIDIAN_WOOL, 30, 60);
        fire.registerFlammableBlock(VIRIDIAN_CARPET, 60, 20);
        fire.registerFlammableBlock(VIRIDIAN_SILKBULB, 5, 20);
        fire.registerFlammableBlock(TAN_WOOL, 30, 60);
        fire.registerFlammableBlock(TAN_CARPET, 60, 20);
        fire.registerFlammableBlock(TAN_SILKBULB, 5, 20);
        fire.registerFlammableBlock(SINOPIA_WOOL, 30, 60);
        fire.registerFlammableBlock(SINOPIA_CARPET, 60, 20);
        fire.registerFlammableBlock(SINOPIA_SILKBULB, 5, 20);
        fire.registerFlammableBlock(LILAC_WOOL, 30, 60);
        fire.registerFlammableBlock(LILAC_CARPET, 60, 20);
        fire.registerFlammableBlock(LILAC_SILKBULB, 5, 20);
        StrippableBlockRegistry.register(AEROBLOOM_LOG, STRIPPED_AEROBLOOM_LOG);
        StrippableBlockRegistry.register(AEROBLOOM_WOOD, STRIPPED_AEROBLOOM_WOOD);
        FlattenableBlockRegistry.register(Blocks.DIRT_PATH, Blocks.DIRT.getDefaultState());
        FlattenableBlockRegistry.register(Blocks.FARMLAND, Blocks.DIRT_PATH.getDefaultState());
        TillableBlockRegistry.register(Blocks.FARMLAND, context -> true, Blocks.DIRT.getDefaultState());
        registerOxidizingSet(STEEL_BLOCK, EXPOSED_STEEL_BLOCK, WEATHERED_STEEL_BLOCK, OXIDIZED_STEEL_BLOCK, WAXED_STEEL_BLOCK, WAXED_EXPOSED_STEEL_BLOCK, WAXED_WEATHERED_STEEL_BLOCK, WAXED_OXIDIZED_STEEL_BLOCK);
        registerOxidizingSet(CUT_STEEL, EXPOSED_CUT_STEEL, WEATHERED_CUT_STEEL, OXIDIZED_CUT_STEEL, WAXED_CUT_STEEL, WAXED_EXPOSED_CUT_STEEL, WAXED_WEATHERED_CUT_STEEL, WAXED_OXIDIZED_CUT_STEEL);
        registerOxidizingSet(CUT_STEEL_STAIRS, EXPOSED_CUT_STEEL_STAIRS, WEATHERED_CUT_STEEL_STAIRS, OXIDIZED_CUT_STEEL_STAIRS, WAXED_CUT_STEEL_STAIRS, WAXED_EXPOSED_CUT_STEEL_STAIRS, WAXED_WEATHERED_CUT_STEEL_STAIRS, WAXED_OXIDIZED_CUT_STEEL_STAIRS);
        registerOxidizingSet(CUT_STEEL_SLAB, EXPOSED_CUT_STEEL_SLAB, WEATHERED_CUT_STEEL_SLAB, OXIDIZED_CUT_STEEL_SLAB, WAXED_CUT_STEEL_SLAB, WAXED_EXPOSED_CUT_STEEL_SLAB, WAXED_WEATHERED_CUT_STEEL_SLAB, WAXED_OXIDIZED_CUT_STEEL_SLAB);
        registerOxidizingSet(STEEL_GRATE, EXPOSED_STEEL_GRATE, WEATHERED_STEEL_GRATE, OXIDIZED_STEEL_GRATE, WAXED_STEEL_GRATE, WAXED_EXPOSED_STEEL_GRATE, WAXED_WEATHERED_STEEL_GRATE, WAXED_OXIDIZED_STEEL_GRATE);
        registerOxidizingSet(CHISELED_STEEL, EXPOSED_CHISELED_STEEL, WEATHERED_CHISELED_STEEL, OXIDIZED_CHISELED_STEEL, WAXED_CHISELED_STEEL, WAXED_EXPOSED_CHISELED_STEEL, WAXED_WEATHERED_CHISELED_STEEL, WAXED_OXIDIZED_CHISELED_STEEL);
        registerOxidizingSet(STEEL_FENCE, EXPOSED_STEEL_FENCE, WEATHERED_STEEL_FENCE, OXIDIZED_STEEL_FENCE, WAXED_STEEL_FENCE, WAXED_EXPOSED_STEEL_FENCE, WAXED_WEATHERED_STEEL_FENCE, WAXED_OXIDIZED_STEEL_FENCE);
        registerOxidizingSet(STEEL_DOOR, EXPOSED_STEEL_DOOR, WEATHERED_STEEL_DOOR, OXIDIZED_STEEL_DOOR, WAXED_STEEL_DOOR, WAXED_EXPOSED_STEEL_DOOR, WAXED_WEATHERED_STEEL_DOOR, WAXED_OXIDIZED_STEEL_DOOR);
        registerOxidizingSet(STEEL_TRAPDOOR, EXPOSED_STEEL_TRAPDOOR, WEATHERED_STEEL_TRAPDOOR, OXIDIZED_STEEL_TRAPDOOR, WAXED_STEEL_TRAPDOOR, WAXED_EXPOSED_STEEL_TRAPDOOR, WAXED_WEATHERED_STEEL_TRAPDOOR, WAXED_OXIDIZED_STEEL_TRAPDOOR);
    }

    private static void registerOxidizingSet(Block unaffected, Block exposed, Block weathered, Block oxidized) {
        OxidizableBlocksRegistry.registerOxidizableBlockPair(unaffected, exposed);
        OxidizableBlocksRegistry.registerOxidizableBlockPair(exposed, weathered);
        OxidizableBlocksRegistry.registerOxidizableBlockPair(weathered, oxidized);
    }

    private static void registerOxidizingSet(Block unaffected, Block exposed, Block weathered, Block oxidized, Block waxed, Block waxedExposed, Block waxedWeathered, Block waxedOxidized) {
        registerOxidizingSet(unaffected, exposed, weathered, oxidized);
        OxidizableBlocksRegistry.registerWaxableBlockPair(unaffected, waxed);
        OxidizableBlocksRegistry.registerWaxableBlockPair(exposed, waxedExposed);
        OxidizableBlocksRegistry.registerWaxableBlockPair(weathered, waxedWeathered);
        OxidizableBlocksRegistry.registerWaxableBlockPair(oxidized, waxedOxidized);
    }

}
